[{"C:\\Website By Mint\\realtime-chat-application\\src\\containers\\HomePage\\index.js":"1","C:\\Website By Mint\\realtime-chat-application\\src\\App.js":"2","C:\\Website By Mint\\realtime-chat-application\\src\\containers\\LoginPage\\index.js":"3","C:\\Website By Mint\\realtime-chat-application\\src\\containers\\NewFeedPage\\index.js":"4","C:\\Website By Mint\\realtime-chat-application\\src\\actions\\index.js":"5","C:\\Website By Mint\\realtime-chat-application\\src\\reducers\\userReducer.js":"6","C:\\Website By Mint\\realtime-chat-application\\src\\components\\ModalPost\\index.js":"7","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Error\\index.js":"8","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Title\\index.js":"9","C:\\Website By Mint\\realtime-chat-application\\src\\actions\\post.js":"10","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Header\\index.js":"11","C:\\Website By Mint\\realtime-chat-application\\src\\actions\\auth.js":"12","C:\\Website By Mint\\realtime-chat-application\\src\\containers\\ProfilePage\\index.js":"13","C:\\Website By Mint\\realtime-chat-application\\src\\index.js":"14","C:\\Website By Mint\\realtime-chat-application\\src\\reducers\\postReducer.js":"15","C:\\Website By Mint\\realtime-chat-application\\src\\actions\\interaction.js":"16","C:\\Website By Mint\\realtime-chat-application\\src\\components\\ModalUpdateAvatar\\index.js":"17","C:\\Website By Mint\\realtime-chat-application\\src\\containers\\SignUpPage\\index.js":"18","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Input\\index.js":"19","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Loading\\index.js":"20","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\FormChat\\index.js":"21","C:\\Website By Mint\\realtime-chat-application\\src\\reducers\\index.js":"22","C:\\Website By Mint\\realtime-chat-application\\src\\database\\firebase.js":"23","C:\\Website By Mint\\realtime-chat-application\\src\\store\\index.js":"24","C:\\Website By Mint\\realtime-chat-application\\src\\reducers\\interactionReducer.js":"25","C:\\Website By Mint\\realtime-chat-application\\src\\actions\\user.js":"26","C:\\Website By Mint\\realtime-chat-application\\src\\actions\\constants.js":"27"},{"size":14673,"mtime":1615220034042,"results":"28","hashOfConfig":"29"},{"size":1627,"mtime":1611670210556,"results":"30","hashOfConfig":"29"},{"size":1740,"mtime":1611680031089,"results":"31","hashOfConfig":"29"},{"size":6516,"mtime":1611670736309,"results":"32","hashOfConfig":"29"},{"size":101,"mtime":1610883935199,"results":"33","hashOfConfig":"29"},{"size":2790,"mtime":1610884697341,"results":"34","hashOfConfig":"29"},{"size":3106,"mtime":1610006478893,"results":"35","hashOfConfig":"29"},{"size":308,"mtime":1609169470062,"results":"36","hashOfConfig":"29"},{"size":201,"mtime":1609005437418,"results":"37","hashOfConfig":"29"},{"size":6210,"mtime":1611585142727,"results":"38","hashOfConfig":"29"},{"size":2974,"mtime":1615180457284,"results":"39","hashOfConfig":"29"},{"size":8330,"mtime":1618580321083,"results":"40","hashOfConfig":"29"},{"size":5453,"mtime":1615219932507,"results":"41","hashOfConfig":"29"},{"size":311,"mtime":1611572889522,"results":"42","hashOfConfig":"29"},{"size":2642,"mtime":1611566027960,"results":"43","hashOfConfig":"29"},{"size":2970,"mtime":1610874457191,"results":"44","hashOfConfig":"29"},{"size":2173,"mtime":1610881597463,"results":"45","hashOfConfig":"29"},{"size":2147,"mtime":1609310046306,"results":"46","hashOfConfig":"29"},{"size":653,"mtime":1609004586761,"results":"47","hashOfConfig":"29"},{"size":213,"mtime":1610005932451,"results":"48","hashOfConfig":"29"},{"size":636,"mtime":1611585545098,"results":"49","hashOfConfig":"29"},{"size":400,"mtime":1610200514489,"results":"50","hashOfConfig":"29"},{"size":556,"mtime":1610959393175,"results":"51","hashOfConfig":"29"},{"size":320,"mtime":1609184533296,"results":"52","hashOfConfig":"29"},{"size":1032,"mtime":1610201452846,"results":"53","hashOfConfig":"29"},{"size":7304,"mtime":1610981080412,"results":"54","hashOfConfig":"29"},{"size":913,"mtime":1611075378907,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"9th9bh",{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"61"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"68"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"68"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"61"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"68"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Website By Mint\\realtime-chat-application\\src\\containers\\HomePage\\index.js",["122","123","124","125","126","127","128","129"],"C:\\Website By Mint\\realtime-chat-application\\src\\App.js",["130","131","132","133"],"import React, { useMemo } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Redirect, Route } from \"react-router-dom\";\nimport SignUp from \"./containers/SignUpPage/index\";\nimport Login from \"./containers/LoginPage/index\";\nimport Home from \"./containers/HomePage/index\";\nimport Profile from \"./containers/ProfilePage/index\";\nimport NewFeed from \"./containers/NewFeedPage/index\";\nimport PrivateRoute from \"./components/Private/index.js\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { isLoggedInUser, setOffLine } from \"./actions\";\nfunction App() {\n  const dispatch = useDispatch();\n  const auth = useSelector((state) => state.auth);\n  React.useEffect(() => {\n    if (!auth.authenticated) {\n      dispatch(isLoggedInUser());\n    }\n  }, []);\n\n  const routes = [\n    { path: \"/realtime-chat-application\", name: \"Home\", component: Home },\n    { path: \"/login\", name: \"Login\", component: Login },\n    { path: \"/signup\", name: \"Sign Up\", component: SignUp },\n    { path: \"/newfeed\", name: \"New Feed\", component: NewFeed },\n    { path: \"/profile/:uid\", name: \"Profile\", component: Profile },\n  ];\n\n  return (\n    <div className=\"App\">\n      <Router>\n        {routes.map((route) => {\n          return (\n            <div key={route.name}>\n              {route.name === \"Login\" || route.name === \"Sign Up\" ? (\n                <Route path={route.path} component={route.component} exact />\n              ) : (\n                <PrivateRoute path={route.path} component={route.component} />\n              )}\n            </div>\n          );\n        })}\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n",["134","135"],"C:\\Website By Mint\\realtime-chat-application\\src\\containers\\LoginPage\\index.js",["136"],"import React, { useState } from \"react\";\r\nimport Layout from \"../../components/Layout\";\r\nimport Input from \"../../components/Layout/UI/Input/index\";\r\nimport Card from \"../../components/Layout/UI/Card/index\";\r\nimport Button from \"../../components/Layout/UI/Button/index\";\r\nimport Title from \"../../components/Layout/UI/Title/index\";\r\nimport Error from \"../../components/Layout/UI/Error/index\";\r\nimport \"./style.scss\";\r\nimport { signIn } from \"../../actions/auth\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {useFormik} from 'formik'\r\nconst Login = () => {\r\n  const dispatch = useDispatch();\r\n  const auth = useSelector((state) => state.auth);\r\n  const [form, setForm] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n    dispatch(signIn(form));\r\n  };\r\n  if (auth.authenticated === true) {\r\n    return <Redirect to=\"/realtime-chat-application\" />;\r\n  } else {\r\n    return (\r\n      <Layout>\r\n        <Card>\r\n          <form onSubmit={handleLogin} className=\"authForm\">\r\n            <Title>Login</Title>\r\n            <Input\r\n              type=\"email\"\r\n              label=\"Email\"\r\n              placeholder=\"\"\r\n              onChange={(value) => setForm({ ...form, email: value })}\r\n            />\r\n            <Input\r\n              type=\"password\"\r\n              label=\"Password\"\r\n              placeholder=\"\"\r\n              onChange={(value) => setForm({ ...form, password: value })}\r\n            />\r\n            {auth.error ? <Error>{auth.error}</Error> : <></>}\r\n            <Button type=\"submit\">LOG IN</Button>\r\n          </form>\r\n        </Card>\r\n      </Layout>\r\n    );\r\n  }\r\n};\r\nexport default Login;\r\n","C:\\Website By Mint\\realtime-chat-application\\src\\containers\\NewFeedPage\\index.js",["137","138","139"],"import React, { useState } from \"react\";\r\nimport Layout from \"../../components/Layout\";\r\nimport \"./style.scss\";\r\nimport testImg from \"../../images/mint.jpg\";\r\nimport { AiOutlineSend, AiOutlineHeart, AiFillHeart } from \"react-icons/ai\";\r\nimport noavt from '../../images/noavtar.png';\r\nimport { BsChat } from \"react-icons/bs\";\r\nimport { VscBookmark } from \"react-icons/vsc\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getRealTimePostsNewFeed,\r\n  pushPostComment,\r\n  setOffLine,\r\n  updateLike,\r\n} from \"../../actions\";\r\nimport moment from \"moment\";\r\nimport Button from \"../../components/Layout/UI/Button\";\r\nimport FormChat from \"../../components/Layout/UI/FormChat\";\r\nimport { NavLink } from \"react-router-dom\";\r\nconst NewFeedPage = () => {\r\n  const dispatch = useDispatch();\r\n  const [comment, setComment] = useState(\"\");\r\n  const { post, auth } = useSelector((state) => state);\r\n  const posts = React.useMemo(() => {\r\n    return post.posts;\r\n  }, [post.posts]);\r\n  React.useEffect(() => {\r\n    dispatch(getRealTimePostsNewFeed());\r\n  }, []);\r\n  const handleUpdateLike = (pid) => {\r\n    const interaction = {\r\n      pid,\r\n      uid: auth.uid,\r\n    };\r\n    dispatch(updateLike(interaction));\r\n  };\r\n  const isInArray = (arr) => {\r\n    if (arr.length > 0) {\r\n      for (let i = 0; i < arr.length; i++) {\r\n        if (arr[i].uid === auth.uid) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n \r\n  const handlePushComment = (e,pid) => {\r\n    e.preventDefault();\r\n  \r\n     if(comment!=='')\r\n     {\r\n      dispatch(pushPostComment({ pid, uid: auth.uid, content: comment }))\r\n      setComment('')\r\n     }\r\n    \r\n  };\r\n  return (\r\n    <Layout>\r\n      <div className=\"newFeed\">\r\n        <div className=\"newFeedWrap\">\r\n          <div className=\"swipeSide\">\r\n            <div className=\"storyLine\">\r\n              <div className=\"storyBox\">\r\n                <div className=\"avatarWrap\">\r\n                  <img src={testImg} alt=\"avatar\" />\r\n                </div>\r\n                <div className=\"nameWrap\">\r\n                  <p>minttran</p>\r\n                </div>\r\n              </div>\r\n              <div className=\"storyBox\">\r\n                <div className=\"avatarWrap\">\r\n                  <img src={testImg} alt=\"avatar\" />\r\n                </div>\r\n                <div className=\"nameWrap\">\r\n                  <p>miran</p>\r\n                </div>\r\n              </div>\r\n              <div className=\"storyBox\">\r\n                <div className=\"avatarWrap\">\r\n                  <img src={testImg} alt=\"avatar\" />\r\n                </div>\r\n                <div className=\"nameWrap\">\r\n                  <p>minttran</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"postWrapper\">\r\n              {posts.map((item, index) => (\r\n                <div key={index} className=\"post\">\r\n                  <NavLink to={`profile/${item.uid}`} className=\"postOwner\">\r\n                    <div className=\"ownerImage\">\r\n                      <img\r\n                        src={\r\n                          item.owner.avatarUrl != null ? item.owner.avatarUrl : noavt\r\n                        }\r\n                        alt=\"avatar owner\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"ownerName\">\r\n                      <p>{item.owner.firstName + \" \" + item.owner.lastName}</p>\r\n                    </div>\r\n                  </NavLink>\r\n                  <div className=\"postImage\">\r\n                    <img src={item.file} alt={item.status} />\r\n                  </div>\r\n                  <div className=\"interactionBox\">\r\n                    <div className=\"button\">\r\n                      {!isInArray(item.interactions) ? (\r\n                        <AiOutlineHeart\r\n                          onClick={() => handleUpdateLike(item.key)}\r\n                          className=\"icon\"\r\n                        />\r\n                      ) : (\r\n                        <AiFillHeart\r\n                          onClick={() => handleUpdateLike(item.key)}\r\n                          className=\"icon\"\r\n                        />\r\n                      )}\r\n                      <BsChat className=\"icon\" />\r\n                      <AiOutlineSend className=\"icon\" />\r\n                    </div>\r\n                    <div className=\"save\">\r\n                      <VscBookmark className=\"icon\" />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"likedBy\">\r\n                    <p>Liked by {item.interactions.length} peoples</p>\r\n                  </div>\r\n                  <div className=\"postContent\">\r\n                    <div className=\"ownerName\">\r\n                      <span className=\"name\">\r\n                        {item.owner.firstName + \" \" + item.owner.lastName}\r\n                      </span>\r\n                      <span className=\"content\">{item.status}</span>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"viewAllComment\">\r\n                    {item.comments.length > 2 ? (\r\n                      <p>View All {item.comments.length} Comments</p>\r\n                    ) : (\r\n                      <></>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"commentBox\">\r\n                    {item.comments.slice(0,2).map((comment, commentIndex) => (\r\n                      <div key={commentIndex} className=\"comment\">\r\n                        <span className=\"name\">\r\n                          {comment.sender.firstName +\r\n                            \" \" +\r\n                            comment.sender.lastName}\r\n                        </span>\r\n                        <span className=\"conent\">{comment.content}</span>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                  <div className=\"createdAt\">\r\n                    <p>{moment(item.createdAt.toDate()).fromNow(true)} ago</p>\r\n                  </div>\r\n                  <FormChat\r\n                    onChange={(value) => setComment(value)}\r\n                    style={{ paddingLeft:10,paddingRight:10}}\r\n                    type=\"submit\"\r\n                    value={comment}\r\n                    handleFunction={(e) => handlePushComment(e,item.key)}\r\n                  />\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\nexport default NewFeedPage;\r\n",["140","141"],"C:\\Website By Mint\\realtime-chat-application\\src\\actions\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\reducers\\userReducer.js",["142"],"import { userConstants } from \"../actions/constants\";\r\n\r\nconst initialState = {\r\n  users: [],\r\n  conversations: [],\r\n  loadingUser: true,\r\n  loadingChat: true,\r\n  lastestDoc: {},\r\n  loadingUserByKey: false,\r\n  userByKey: {\r\n    posts : []\r\n  },\r\n  error: \"\",\r\n  notify : \"\",\r\n  updating :false,\r\n};\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case `${userConstants.GET_REALTIME_USERS}_REQUEST`:\r\n      state = {\r\n        ...state,\r\n        loadingUser: true,\r\n      };\r\n      return state;\r\n    case `${userConstants.GET_REALTIME_USERS}_SUCCESS`:\r\n      state = {\r\n        ...state,\r\n        loadingUser: false,\r\n        users: action.payload.users,\r\n      };\r\n      return state;\r\n    case `${userConstants.GET_REALTIME_MESSAGE}_REQUEST`:\r\n      state = {\r\n        ...state,\r\n        loadingChat: true,\r\n      };\r\n      return state;\r\n    case `${userConstants.GET_REALTIME_MESSAGE}_SUCCESS`:\r\n      state = {\r\n        ...state,\r\n        loadingChat: false,\r\n        conversations: action.payload.conversations,\r\n        lastestDoc: action.payload.lastDoc,\r\n      };\r\n      return state;\r\n    case `${userConstants.GET_LOADMORE_MESSAGE}_REQUEST`:\r\n      state = {\r\n        ...state,\r\n        loadingChat: true,\r\n      };\r\n      return state;\r\n    case `${userConstants.GET_LOADMORE_MESSAGE}_SUCCESS`:\r\n      state = {\r\n        ...state,\r\n        loadingChat: false,\r\n        conversations: [\r\n          ...action.payload.conversations,\r\n          ...state.conversations,\r\n        ],\r\n        lastestDoc: action.payload.lastestDoc,\r\n      };\r\n      return state;\r\n    case `${userConstants.GET_LOADMORE_MESSAGE}_FAILURE`:\r\n      state = {\r\n        ...state,\r\n      };\r\n      return state;\r\n    case `${userConstants.GET_USER_PROFILE_BY_ID}_REQUEST`:\r\n      state = {\r\n        ...state,\r\n        loadingUserByKey: true,\r\n      };\r\n      return state;\r\n    case `${userConstants.GET_USER_PROFILE_BY_ID}_SUCCESS`:\r\n      state = {\r\n        ...state,\r\n        loadingUserByKey: false,\r\n        userByKey: action.payload.userByKey,\r\n      };\r\n      return state;\r\n    case `${userConstants.GET_USER_PROFILE_BY_ID}_FAILURE`:\r\n      state = {\r\n        ...state,\r\n        error: action.payload.error,\r\n      };\r\n      return state;\r\n      case `${userConstants.UPDATE_USER_AVATAR}_REQUEST`:\r\n        state={\r\n          ...state,\r\n          updating:true\r\n        }\r\n        return state;\r\n      case `${userConstants.UPDATE_USER_AVATAR}_SUCCESS`:\r\n        state = {\r\n          ...state,\r\n          updating : false,\r\n          notify: action.payload.notify,\r\n          userByKey : {\r\n            ...state.userByKey,\r\n            avatarUrl: action.payload.avatarUrl,\r\n          }\r\n        };\r\n        return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n",["143","144"],"C:\\Website By Mint\\realtime-chat-application\\src\\components\\ModalPost\\index.js",["145","146","147","148"],"import React from \"react\";\r\nimport \"./style.scss\";\r\nimport { AiOutlineClose, AiOutlinePicture } from \"react-icons/ai\";\r\nimport Mint from \"../../images/mint.jpg\";\r\nimport { BiLock, BiMap } from \"react-icons/bi\";\r\nimport Title from \"../../components/Layout/UI/Title/index\";\r\nimport Button from \"../Layout/UI/Button\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { pushPost } from \"../../actions/post\";\r\nconst ModalPost = () => {\r\n  const dispatch = useDispatch();\r\n  const auth = useSelector((state) => state.auth);\r\n\r\n  const [postImage, setPostImage] = React.useState(\"\");\r\n\r\n  const closeModalPost = () => {\r\n    document.querySelector(\".modalPost\").classList.remove(\"open\");\r\n  };\r\n  const filePost = document.getElementById(\"filePost\");\r\n  const postImageElement = document.getElementById(\"postImageElement\");\r\n  const openFileInput = () => {\r\n    filePost.click();\r\n    setPostImage(\"advanced\");\r\n  };\r\n  const imageBox = document.querySelector(\".imageBox\");\r\n  const viewFile = (e) => {\r\n \r\n    imageBox.classList.add(\"hasFile\");\r\n\r\n    // console.log(filePost.files.length);\r\n    if (filePost.files.length > 0) {\r\n      postImageElement.src = URL.createObjectURL(filePost.files[0]);\r\n    }\r\n    setPostImage(\"\");\r\n  };\r\n  React.useEffect(() => {\r\n    if (postImage != \"\") {\r\n      filePost.addEventListener(\"change\", viewFile);\r\n    }\r\n  }, [postImage]);\r\n  const handlePost = () => {\r\n    var postText = document.getElementById(\"postText\").value;\r\n    if (filePost.files.length > 0) {\r\n      const post = {\r\n        file: filePost.files[0],\r\n        status: postText,\r\n        uid:auth.uid\r\n      };\r\n      dispatch(pushPost(post));\r\n      imageBox.classList.remove(\"hasFile\");\r\n      postImageElement.src = \"\";\r\n      postText = \"\";\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"modalPost\">\r\n      <div className=\"modalWrapper\">\r\n        <div className=\"head\">\r\n          <div className=\"title\">\r\n            <Title>Make a post</Title>\r\n          </div>\r\n          <AiOutlineClose onClick={closeModalPost} className=\"icon\" />\r\n        </div>\r\n        <div className=\"poster\">\r\n          <div className=\"posterImage\">\r\n            <img src={Mint} />\r\n          </div>\r\n          <div className=\"posterName\">\r\n            <p>Mint</p>\r\n            <div className=\"securityMode\">\r\n              <BiLock className=\"icon\" />\r\n              <span>Private</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"statusBox\">\r\n          <textarea\r\n            id=\"postText\"\r\n            placeholder=\"What are you thinking ?\"\r\n          ></textarea>\r\n          <div className=\"imageBox\">\r\n            <img id=\"postImageElement\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"postButton\">\r\n          <Button onClick={handlePost}>Post</Button>\r\n          <div className=\"postIcon\">\r\n            <input type=\"file\" id=\"filePost\" />\r\n            <AiOutlinePicture onClick={openFileInput} className=\"icon\" />\r\n            <BiMap className=\"icon\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default ModalPost;\r\n","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Error\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Title\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\actions\\post.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\components\\Header\\index.js",["149"],"import React from \"react\";\r\nimport \"./style.scss\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { isLoggedInUser, logout } from \"../../actions\";\r\nimport Logo from \"../../images/100ppi/Asset 2.png\";\r\nimport {AiOutlineBars,AiOutlineClose} from 'react-icons/ai'\r\nexport default function Header() {\r\n  const auth = useSelector((state) => state.auth);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleLogout = () => {\r\n    dispatch(logout(auth.uid));\r\n  };\r\n  const closeMenu = ()=>{\r\n    document.querySelector('.navSide').classList.remove('is-active')\r\n  }\r\n  const openMenu = ()=>{\r\n    document.querySelector('.navSide').classList.add('is-active')\r\n\r\n  }\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"navBar\">\r\n        <NavLink to='/realtime-chat-application' className=\"logoArea\">\r\n          <img src={Logo} alt=\"logo\" />\r\n        </NavLink>\r\n        <AiOutlineBars onClick={openMenu} className='hamburger-menu'/>\r\n        <div className=\"navSide\">\r\n          <AiOutlineClose onClick={closeMenu} className='icon close-hamburger-menu'/>\r\n          {!auth.authenticated ? (\r\n            <ul className=\"navWrap\">\r\n              <li className=\"navItem\">\r\n              <NavLink to=\"/realtime-chat-application\" className=\"navLink\">\r\n                Message\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"navItem\">\r\n              <NavLink to=\"/newfeed\" className=\"navLink\">\r\n                New Feed\r\n              </NavLink>\r\n            </li>\r\n              <li className=\"navItem\">\r\n                <NavLink to=\"/login\" className=\"navLink\">\r\n                  Login\r\n                </NavLink>\r\n              </li>\r\n              <li className=\"navItem\">\r\n                <NavLink to=\"/signup\" className=\"navLink\">\r\n                  Sign Up\r\n                </NavLink>\r\n              </li>\r\n            </ul>\r\n          ) : (\r\n            <ul className=\"navWrap\">\r\n              <li className=\"navItem\">\r\n              <NavLink to=\"/realtime-chat-application\" className=\"navLink\">\r\n                Message\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"navItem\">\r\n              <NavLink to=\"/newfeed\" className=\"navLink\">\r\n                New Feed\r\n              </NavLink>\r\n            </li>\r\n              <li className=\"navItem\">\r\n                <NavLink\r\n                  to={{\r\n                    pathname: `/profile/${auth.uid}`,\r\n                    state: { uid: auth.uid },\r\n                  }}\r\n                  className=\"navLink\"\r\n                >\r\n                  {auth.firstName} Profile\r\n                </NavLink>\r\n              </li>\r\n              <li className=\"navItem\">\r\n                <Link to=\"#\" onClick={handleLogout} className=\"navLink\">\r\n                  Log out\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Website By Mint\\realtime-chat-application\\src\\actions\\auth.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\containers\\ProfilePage\\index.js",["150"],"C:\\Website By Mint\\realtime-chat-application\\src\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\reducers\\postReducer.js",["151","152","153"],"import { postConstants } from \"../actions/constants\";\r\n\r\nconst initialState = {\r\n  posts: [],\r\n  posting: true,\r\n  loadingPosts: true,\r\n  error: null,\r\n  posted: false,\r\n  postByKey: {\r\n    item: {},\r\n    comments: [],\r\n    loading: true,\r\n    error: null,\r\n  },\r\n};\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case `${postConstants.PUSH_POST}_REQUEST`:\r\n      state = {\r\n        ...state,\r\n      };\r\n      return state;\r\n    case `${postConstants.PUSH_POST}_SUCCESS`:\r\n      state = {\r\n        ...state,\r\n        posting: false,\r\n        posted: true,\r\n      };\r\n      return state;\r\n    case `${postConstants.PUSH_POST}_FAILURE`:\r\n      state = {\r\n        ...state,\r\n        posted: false,\r\n        posting: false,\r\n        error: action.payload.error,\r\n      };\r\n    case `${postConstants.GET_REALTIME_POSTS}_REQUEST`:\r\n      state = {\r\n        ...state,\r\n      };\r\n      return state;\r\n    case `${postConstants.GET_REALTIME_POSTS}_SUCCESS`:\r\n      state = {\r\n        ...state,\r\n        loadingPosts: false,\r\n        posts: action.payload.posts,\r\n      };\r\n      return state;\r\n    case `${postConstants.GET_REALTIME_POSTS}_FAILURE`:\r\n      state = {\r\n        ...state,\r\n        loadingPosts: false,\r\n        error: action.payload.error,\r\n      };\r\n      return state;\r\n    case `${postConstants.GET_POST_BY_KEY}_REQUEST`:\r\n      state = {\r\n        ...state,\r\n      };\r\n      return state;\r\n    case `${postConstants.GET_POST_BY_KEY}_SUCCESS`:\r\n      state = {\r\n        ...state,\r\n        postByKey: {\r\n          ...state.postByKey,\r\n          item: action.payload.postItem,\r\n          comments: action.payload.comments,\r\n          loading: false,\r\n          error: null,\r\n        },\r\n      };\r\n      return state;\r\n    case `${postConstants.GET_POST_BY_KEY}_FAILURE`:\r\n      state = {\r\n        ...state,\r\n        postByKey: {\r\n          ...state.postByKey,\r\n          loading: true,\r\n          error: action.payload.error,\r\n        },\r\n      };\r\n      return state;\r\n    case `${postConstants.GET_REALTIME_POSTS_NEW_FEED}_REQUEST`:\r\n      state = {\r\n        ...state,\r\n        loadingPosts: true,\r\n      };\r\n      return state;\r\n    case `${postConstants.GET_REALTIME_POSTS_NEW_FEED}_SUCCESS`:\r\n      debugger\r\n      state = {\r\n        ...state,\r\n        loadingPosts: false,\r\n        posts:action.payload.posts,\r\n        error:'',\r\n        \r\n      };\r\n      return state;\r\n    case `${postConstants.GET_REALTIME_POSTS_NEW_FEED}_FAILURE`:\r\n      state = {\r\n        ...state,\r\n        loadingPosts : false,\r\n        error: action.payload.error,\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Website By Mint\\realtime-chat-application\\src\\actions\\interaction.js",["154"],"C:\\Website By Mint\\realtime-chat-application\\src\\components\\ModalUpdateAvatar\\index.js",["155","156","157"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./style.scss\";\r\nimport Button from \"../Layout/UI/Button\";\r\nimport Mint from \"../../images/mint.jpg\";\r\nimport { AiOutlineClose } from \"react-icons/ai\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateUserAvatar } from \"../../actions/user\";\r\nconst ModalUpdateAvatar = () => {\r\n    const dispatch = useDispatch()\r\n    const auth = useSelector(state => state.auth)\r\n  const [temp, setTemp] = useState(\"\");\r\n\r\n  const closeModalPost = () => {\r\n    modal.classList.remove('open')\r\n  };\r\n  let fileInput = useRef(null);\r\n  let imgSrc = useRef(null);\r\n  let modal = useRef(null)\r\n  const openFileInput = () => {\r\n    fileInput.click();\r\n    setTemp(\"advanced\");\r\n  };\r\n  const viewPhoto = () => {\r\n    if (fileInput.files.length > 0) {\r\n      imgSrc.src = URL.createObjectURL(fileInput.files[0]);\r\n    }\r\n  };\r\n  const handleUpdateAvatar = ()=>{\r\n      dispatch(updateUserAvatar(auth.uid,fileInput.files[0]))\r\n  }\r\n  useEffect(() => {\r\n    if (temp == \"advanced\") {\r\n      fileInput.addEventListener(\"change\", viewPhoto);\r\n    }\r\n  }, [temp]);\r\n  return (\r\n    <div ref={el=>modal=el} className=\"modalUpdateAvatar\">\r\n      <div className=\"modalWrapper\">\r\n        <AiOutlineClose onClick={closeModalPost} className=\"icon\" />\r\n        <div className=\"modalTitle\">\r\n          <p>Update Avatar</p>\r\n        </div>\r\n        <div className=\"openFile\">\r\n          <button onClick={openFileInput}>Choose a file</button>\r\n          <input\r\n            type=\"file\"\r\n            className=\"input\"\r\n            ref={(el) => {\r\n              fileInput = el;\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"avatarBox\">\r\n          <div className=\"avatarWrap\">\r\n            <img\r\n              id=\"image\"\r\n              ref={(el) => {\r\n                imgSrc = el;\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"updateBtn\">\r\n          <Button onClick={handleUpdateAvatar}>Save</Button>\r\n          <Button onClick={closeModalPost}>Cancel</Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default ModalUpdateAvatar;\r\n","C:\\Website By Mint\\realtime-chat-application\\src\\containers\\SignUpPage\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Input\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Loading\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\FormChat\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\reducers\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\database\\firebase.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\store\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\reducers\\interactionReducer.js",["158"],"import { interactionConstants } from \"../actions/constants\";\r\n\r\nconst initialState = {\r\n    interactions : [],\r\n    isLoading : false,\r\n    error : null,\r\n    notify : null,\r\n}\r\nexport default (state = initialState,action)=>{\r\n    switch (action.type) {\r\n        case `${interactionConstants.UPDATE_LIKE}_REQUEST`:\r\n            // state = {\r\n            //     ...state,\r\n            //     interactions : action.payload.interactions,\r\n            //     isLoading:true,\r\n            // }\r\n            return state;\r\n        case `${interactionConstants.GET_REALTIME_INTERACTIONS}_REQUEST`:\r\n            state = {\r\n                ...state,\r\n                isLoading:true,\r\n            };\r\n            return state;\r\n        case `${interactionConstants.GET_REALTIME_INTERACTIONS}_SUCCESS`:\r\n            state = {\r\n                ...state,\r\n                isLoading:false,\r\n                interactions : action.payload.interactions\r\n            }\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}","C:\\Website By Mint\\realtime-chat-application\\src\\actions\\user.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\actions\\constants.js",[],{"ruleId":"159","severity":1,"message":"160","line":46,"column":5,"nodeType":"161","messageId":"162","endLine":46,"endColumn":15},{"ruleId":"163","severity":1,"message":"164","line":64,"column":6,"nodeType":"165","endLine":64,"endColumn":8,"suggestions":"166"},{"ruleId":"167","severity":1,"message":"168","line":87,"column":22,"nodeType":"169","messageId":"170","endLine":87,"endColumn":24},{"ruleId":"163","severity":1,"message":"171","line":96,"column":6,"nodeType":"165","endLine":96,"endColumn":20,"suggestions":"172"},{"ruleId":"163","severity":1,"message":"173","line":102,"column":6,"nodeType":"165","endLine":102,"endColumn":21,"suggestions":"174"},{"ruleId":"167","severity":1,"message":"168","line":104,"column":20,"nodeType":"169","messageId":"170","endLine":104,"endColumn":22},{"ruleId":"163","severity":1,"message":"175","line":107,"column":6,"nodeType":"165","endLine":107,"endColumn":18,"suggestions":"176"},{"ruleId":"167","severity":1,"message":"177","line":169,"column":28,"nodeType":"169","messageId":"170","endLine":169,"endColumn":30},{"ruleId":"159","severity":1,"message":"178","line":1,"column":17,"nodeType":"161","messageId":"162","endLine":1,"endColumn":24},{"ruleId":"159","severity":1,"message":"179","line":3,"column":35,"nodeType":"161","messageId":"162","endLine":3,"endColumn":43},{"ruleId":"159","severity":1,"message":"180","line":11,"column":26,"nodeType":"161","messageId":"162","endLine":11,"endColumn":36},{"ruleId":"163","severity":1,"message":"181","line":19,"column":6,"nodeType":"165","endLine":19,"endColumn":8,"suggestions":"182"},{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","replacedBy":"186"},{"ruleId":"159","severity":1,"message":"187","line":12,"column":9,"nodeType":"161","messageId":"162","endLine":12,"endColumn":18},{"ruleId":"159","severity":1,"message":"180","line":13,"column":3,"nodeType":"161","messageId":"162","endLine":13,"endColumn":13},{"ruleId":"159","severity":1,"message":"188","line":17,"column":8,"nodeType":"161","messageId":"162","endLine":17,"endColumn":14},{"ruleId":"163","severity":1,"message":"189","line":29,"column":6,"nodeType":"165","endLine":29,"endColumn":8,"suggestions":"190"},{"ruleId":"183","replacedBy":"191"},{"ruleId":"185","replacedBy":"192"},{"ruleId":"193","severity":1,"message":"194","line":17,"column":1,"nodeType":"195","endLine":107,"endColumn":3},{"ruleId":"183","replacedBy":"196"},{"ruleId":"185","replacedBy":"197"},{"ruleId":"167","severity":1,"message":"168","line":38,"column":19,"nodeType":"169","messageId":"170","endLine":38,"endColumn":21},{"ruleId":"163","severity":1,"message":"198","line":41,"column":6,"nodeType":"165","endLine":41,"endColumn":17,"suggestions":"199"},{"ruleId":"200","severity":1,"message":"201","line":67,"column":13,"nodeType":"202","endLine":67,"endColumn":31},{"ruleId":"200","severity":1,"message":"201","line":83,"column":13,"nodeType":"202","endLine":83,"endColumn":42},{"ruleId":"159","severity":1,"message":"203","line":5,"column":10,"nodeType":"161","messageId":"162","endLine":5,"endColumn":24},{"ruleId":"163","severity":1,"message":"189","line":43,"column":6,"nodeType":"165","endLine":43,"endColumn":16,"suggestions":"204"},{"ruleId":"193","severity":1,"message":"194","line":16,"column":1,"nodeType":"195","endLine":108,"endColumn":3},{"ruleId":"205","severity":1,"message":"206","line":37,"column":5,"nodeType":"207","messageId":"208","endLine":41,"endColumn":20},{"ruleId":"205","severity":1,"message":"209","line":105,"column":5,"nodeType":"207","messageId":"210","endLine":106,"endColumn":20},{"ruleId":"167","severity":1,"message":"168","line":77,"column":13,"nodeType":"169","messageId":"170","endLine":77,"endColumn":15},{"ruleId":"159","severity":1,"message":"211","line":4,"column":8,"nodeType":"161","messageId":"162","endLine":4,"endColumn":12},{"ruleId":"167","severity":1,"message":"177","line":32,"column":14,"nodeType":"169","messageId":"170","endLine":32,"endColumn":16},{"ruleId":"200","severity":1,"message":"201","line":55,"column":13,"nodeType":"202","endLine":60,"endColumn":15},{"ruleId":"193","severity":1,"message":"194","line":9,"column":1,"nodeType":"195","endLine":34,"endColumn":2},"no-unused-vars","'lastestDoc' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'viewUser'. Either include it or remove the dependency array.","ArrayExpression",["212"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'auth.uid' and 'dispatch'. Either include them or remove the dependency array.",["213"],"React Hook useEffect has missing dependencies: 'loadingChat' and 'userSelected'. Either include them or remove the dependency array.",["214"],"React Hook useEffect has missing dependencies: 'img' and 'viewFile'. Either include them or remove the dependency array.",["215"],"Expected '===' and instead saw '=='.","'useMemo' is defined but never used.","'Redirect' is defined but never used.","'setOffLine' is defined but never used.","React Hook React.useEffect has missing dependencies: 'auth.authenticated' and 'dispatch'. Either include them or remove the dependency array.",["216"],"no-native-reassign",["217"],"no-negated-in-lhs",["218"],"'useFormik' is defined but never used.","'Button' is defined but never used.","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["219"],["217"],["218"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["217"],["218"],"React Hook React.useEffect has missing dependencies: 'filePost' and 'viewFile'. Either include them or remove the dependency array.",["220"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'isLoggedInUser' is defined but never used.",["221"],"no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","Expected a 'break' statement before 'default'.","default","'Mint' is defined but never used.",{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},"no-global-assign","no-unsafe-negation",{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},"Update the dependencies array to be: [viewUser]",{"range":"238","text":"239"},"Update the dependencies array to be: [auth.uid, dispatch, userSelected]",{"range":"240","text":"241"},"Update the dependencies array to be: [conversations, loadingChat, userSelected]",{"range":"242","text":"243"},"Update the dependencies array to be: [img, messageImg, viewFile]",{"range":"244","text":"245"},"Update the dependencies array to be: [auth.authenticated, dispatch]",{"range":"246","text":"247"},"Update the dependencies array to be: [dispatch]",{"range":"248","text":"249"},"Update the dependencies array to be: [filePost, postImage, viewFile]",{"range":"250","text":"251"},"Update the dependencies array to be: [dispatch, uidParam]",{"range":"252","text":"253"},[1931,1933],"[viewUser]",[2964,2978],"[auth.uid, dispatch, userSelected]",[3173,3188],"[conversations, loadingChat, userSelected]",[3303,3315],"[img, messageImg, viewFile]",[769,771],"[auth.authenticated, dispatch]",[1063,1065],"[dispatch]",[1369,1380],"[filePost, postImage, viewFile]",[1292,1302],"[dispatch, uidParam]"]