[{"C:\\Website By Mint\\realtime-chat-application\\src\\reportWebVitals.js":"1","C:\\Website By Mint\\realtime-chat-application\\src\\App.js":"2","C:\\Website By Mint\\realtime-chat-application\\src\\containers\\LoginPage\\index.js":"3","C:\\Website By Mint\\realtime-chat-application\\src\\containers\\HomePage\\index.js":"4","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\index.js":"5","C:\\Website By Mint\\realtime-chat-application\\src\\containers\\SignUpPage\\index.js":"6","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Header\\index.js":"7","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Input\\index.js":"8","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Button\\index.js":"9","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Title\\index.js":"10","C:\\Website By Mint\\realtime-chat-application\\src\\index.js":"11","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Card\\index.js":"12","C:\\Website By Mint\\realtime-chat-application\\src\\store\\index.js":"13","C:\\Website By Mint\\realtime-chat-application\\src\\actions\\auth.js":"14","C:\\Website By Mint\\realtime-chat-application\\src\\reducers\\index.js":"15","C:\\Website By Mint\\realtime-chat-application\\src\\database\\firebase.js":"16","C:\\Website By Mint\\realtime-chat-application\\src\\actions\\index.js":"17","C:\\Website By Mint\\realtime-chat-application\\src\\reducers\\authReducer.js":"18","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Private\\index.js":"19","C:\\Website By Mint\\realtime-chat-application\\src\\actions\\constants.js":"20","C:\\Website By Mint\\realtime-chat-application\\src\\actions\\user.js":"21","C:\\Website By Mint\\realtime-chat-application\\src\\reducers\\userReducer.js":"22","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Error\\index.js":"23","C:\\Website By Mint\\realtime-chat-application\\src\\containers\\ProfilePage\\index.js":"24","C:\\Website By Mint\\realtime-chat-application\\src\\components\\ModalPost\\index.js":"25","C:\\Website By Mint\\realtime-chat-application\\src\\components\\PostDetail\\index.js":"26","C:\\Website By Mint\\realtime-chat-application\\src\\actions\\post.js":"27","C:\\Website By Mint\\realtime-chat-application\\src\\reducers\\postReducer.js":"28","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Loading\\index.js":"29","C:\\Website By Mint\\realtime-chat-application\\src\\components\\ModalUpdateAvatar\\index.js":"30","C:\\Website By Mint\\realtime-chat-application\\src\\actions\\interaction.js":"31","C:\\Website By Mint\\realtime-chat-application\\src\\reducers\\interactionReducer.js":"32","C:\\Website By Mint\\realtime-chat-application\\src\\containers\\NewFeedPage\\index.js":"33","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\FormChat\\index.js":"34"},{"size":362,"mtime":1606470506103,"results":"35","hashOfConfig":"36"},{"size":1601,"mtime":1610961076613,"results":"37","hashOfConfig":"36"},{"size":1706,"mtime":1609310039203,"results":"38","hashOfConfig":"36"},{"size":13993,"mtime":1610954403232,"results":"39","hashOfConfig":"36"},{"size":247,"mtime":1608998879017,"results":"40","hashOfConfig":"36"},{"size":2147,"mtime":1609310046306,"results":"41","hashOfConfig":"36"},{"size":2552,"mtime":1611048183269,"results":"42","hashOfConfig":"36"},{"size":653,"mtime":1609004586761,"results":"43","hashOfConfig":"36"},{"size":223,"mtime":1609956302749,"results":"44","hashOfConfig":"36"},{"size":201,"mtime":1609005437418,"results":"45","hashOfConfig":"36"},{"size":311,"mtime":1611572889522,"results":"46","hashOfConfig":"36"},{"size":191,"mtime":1609002388353,"results":"47","hashOfConfig":"36"},{"size":320,"mtime":1609184533296,"results":"48","hashOfConfig":"36"},{"size":4664,"mtime":1610881295579,"results":"49","hashOfConfig":"36"},{"size":400,"mtime":1610200514489,"results":"50","hashOfConfig":"36"},{"size":556,"mtime":1610959393175,"results":"51","hashOfConfig":"36"},{"size":101,"mtime":1610883935199,"results":"52","hashOfConfig":"36"},{"size":1546,"mtime":1610884583122,"results":"53","hashOfConfig":"36"},{"size":517,"mtime":1609053109445,"results":"54","hashOfConfig":"36"},{"size":913,"mtime":1611075378907,"results":"55","hashOfConfig":"36"},{"size":7304,"mtime":1610981080412,"results":"56","hashOfConfig":"36"},{"size":2790,"mtime":1610884697341,"results":"57","hashOfConfig":"36"},{"size":308,"mtime":1609169470062,"results":"58","hashOfConfig":"36"},{"size":4539,"mtime":1610980611585,"results":"59","hashOfConfig":"36"},{"size":3106,"mtime":1610006478893,"results":"60","hashOfConfig":"36"},{"size":8817,"mtime":1611580965645,"results":"61","hashOfConfig":"36"},{"size":6210,"mtime":1611585142727,"results":"62","hashOfConfig":"36"},{"size":2642,"mtime":1611566027960,"results":"63","hashOfConfig":"36"},{"size":213,"mtime":1610005932451,"results":"64","hashOfConfig":"36"},{"size":2173,"mtime":1610881597463,"results":"65","hashOfConfig":"36"},{"size":2970,"mtime":1610874457191,"results":"66","hashOfConfig":"36"},{"size":1032,"mtime":1610201452846,"results":"67","hashOfConfig":"36"},{"size":6550,"mtime":1611587359661,"results":"68","hashOfConfig":"36"},{"size":636,"mtime":1611585545098,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"9th9bh",{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"76"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"76"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"72"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"76"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"72"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"85"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"72"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Website By Mint\\realtime-chat-application\\src\\reportWebVitals.js",[],["157","158"],"C:\\Website By Mint\\realtime-chat-application\\src\\App.js",["159","160"],"import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Redirect, Route } from \"react-router-dom\";\nimport SignUp from \"./containers/SignUpPage/index\";\nimport Login from \"./containers/LoginPage/index\";\nimport Home from \"./containers/HomePage/index\";\nimport Profile from \"./containers/ProfilePage/index\";\nimport NewFeed from './containers/NewFeedPage/index'\nimport PrivateRoute from \"./components/Private/index.js\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { isLoggedInUser } from \"./actions\";\nfunction App() {\n  const dispatch = useDispatch();\n  const auth = useSelector((state) => state.auth);\n\n  React.useEffect(() => {\n    if (!auth.authenticated) {\n      dispatch(isLoggedInUser());\n    }\n  }, []);\n  const routes = [\n    { path: \"/realtime-chat-application\", name: \"Home\", component: Home },\n    { path: \"/login\", name: \"Login\", component: Login },\n    { path: \"/signup\", name: \"Sign Up\", component: SignUp },\n    { path: \"/newfeed\", name: \"New Feed\", component: NewFeed },\n    { path: \"/profile/:uid\", name: \"Profile\", component: Profile },\n  ];\n\n  return (\n    <div className=\"App\">\n      <Router>\n        {routes.map((route) => {\n          return (\n            <div key={route.name}>\n              {route.name === \"Login\" || route.name === \"Sign Up\" ? (\n                <Route path={route.path} component={route.component} exact />\n              ) : (\n                <PrivateRoute path={route.path} component={route.component} />\n              )}\n            </div>\n          );\n        })}\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n",["161","162"],"C:\\Website By Mint\\realtime-chat-application\\src\\containers\\LoginPage\\index.js",[],["163","164"],"C:\\Website By Mint\\realtime-chat-application\\src\\containers\\HomePage\\index.js",["165","166","167","168","169","170","171","172","173","174","175","176"],"import React, { useEffect, useState } from \"react\";\r\nimport Layout from \"../../components/Layout/index\";\r\nimport Mint from \"../../images/mint.jpg\";\r\nimport Button from \"../../components/Layout/UI/Button/index\";\r\nimport \"./style.scss\";\r\nimport {\r\n  AiOutlinePlusCircle,\r\n  AiOutlineFileGif,\r\n  AiOutlinePicture,\r\n  AiOutlineHeart,\r\n  AiOutlinePhone,\r\n  AiOutlineInfoCircle,\r\n  AiOutlineSend,\r\n  AiOutlineCheckCircle,\r\n  AiFillCheckCircle,\r\n  AiOutlineUser,\r\n  AiOutlineDelete,\r\n  AiOutlineBell,\r\n  AiOutlineLock,\r\n} from \"react-icons/ai\";\r\nimport { BiLoaderCircle } from \"react-icons/bi\";\r\nimport { RiSendPlaneFill } from \"react-icons/ri\";\r\nimport { BsCameraVideo } from \"react-icons/bs\";\r\nimport { MdTagFaces } from \"react-icons/md\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getLoadMoreConversations,\r\n  getRealTimeConversations,\r\n  getRealTimeUser,\r\n  setSeenMessage,\r\n  updateMessage,\r\n} from \"../../actions\";\r\nimport noavt from \"../../images/noavtar.png\";\r\nimport Title from \"../../components/Layout/UI/Title/index\";\r\nimport { NavLink } from \"react-router-dom\";\r\nconst Home = () => {\r\n  const [isSelected, setIsSelected] = useState(\"\");\r\n  const [userSelected, setUserSelected] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [messageImg, setMessageImg] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const [menuSelected, setMenuSelected] = useState(-1);\r\n  const {\r\n    users,\r\n    conversations,\r\n    loadingUser,\r\n    loadingChat,\r\n    lastestDoc,\r\n  } = useSelector((state) => state.user);\r\n  const auth = useSelector((state) => state.auth);\r\n\r\n  const viewUser = () => {\r\n    dispatch(getRealTimeUser(auth.uid));\r\n  };\r\n  useEffect(() => {\r\n    viewUser();\r\n  }, []);\r\n  const selectItem = (index) => {\r\n    if (isSelected !== \"\") {\r\n      const prevItem = document.querySelectorAll(\".friend\")[isSelected];\r\n      prevItem.classList.remove(\"isSelected\");\r\n      const curItem = document.querySelectorAll(\".friend\")[index];\r\n      curItem.classList.add(\"isSelected\");\r\n      setIsSelected(index);\r\n    } else {\r\n      const curItem = document.querySelectorAll(\".friend\")[index];\r\n      curItem.classList.add(\"isSelected\");\r\n      setIsSelected(index);\r\n    }\r\n  };\r\n  const initChat = (user) => {\r\n    const users = { uid_1: auth.uid, uid_2: user.uid };\r\n    setUserSelected(user);\r\n    dispatch(getRealTimeConversations(users));\r\n  };\r\n  useEffect(() => {\r\n    if (userSelected != \"\") {\r\n      dispatch(\r\n        getRealTimeConversations({\r\n          uid_1: auth.uid,\r\n          uid_2: userSelected.uid,\r\n          type: \"afterSend\",\r\n        })\r\n      );\r\n    }\r\n  }, [userSelected]);\r\n  useEffect(() => {\r\n    if (userSelected != \"\" && !loadingChat) {\r\n      let chatArea = document.getElementById(\"chatArea\");\r\n      chatArea.scrollTop = chatArea.scrollHeight;\r\n    }\r\n  }, [conversations]);\r\n  useEffect(() => {\r\n    if (messageImg != \"\") {\r\n      img.addEventListener(\"change\", viewFile);\r\n    }\r\n  }, [messageImg]);\r\n\r\n  const img = document.getElementById(\"fileInput\");\r\n  const messImgElement = document.getElementById(\"messageImg\");\r\n  const openFile = (e) => {\r\n    img.click();\r\n    setMessageImg(\"advanced\");\r\n  };\r\n  const viewFile = (e) => {\r\n    const fileSend = document.querySelector(\".fileSend\");\r\n    fileSend.classList.add(\"hasFile\");\r\n    messImgElement.src = URL.createObjectURL(img.files[0]);\r\n  };\r\n\r\n  const submitMessageFile = (e) => {\r\n    e.preventDefault();\r\n    const msgObj = {\r\n      user_uid_1: auth.uid,\r\n      user_uid_2: userSelected.uid,\r\n      file: img.files[0],\r\n    };\r\n\r\n    dispatch(updateMessage({ msgObj: msgObj, type: \"file\" }));\r\n    const fileSend = document.querySelector(\".fileSend\");\r\n    fileSend.classList.remove(\"hasFile\");\r\n    messImgElement.src = \"\";\r\n    dispatch(\r\n      getRealTimeConversations({\r\n        uid_1: auth.uid,\r\n        uid_2: userSelected.uid,\r\n        type: \"afterSend\",\r\n      })\r\n    );\r\n  };\r\n  const submitMessage = (e) => {\r\n    e.preventDefault();\r\n    const msgObj = {\r\n      user_uid_1: auth.uid,\r\n      user_uid_2: userSelected.uid,\r\n      message,\r\n    };\r\n    if (message !== \"\") {\r\n      dispatch(updateMessage({ msgObj: msgObj }));\r\n      dispatch(\r\n        getRealTimeConversations({\r\n          uid_1: auth.uid,\r\n          uid_2: userSelected.uid,\r\n          type: \"afterSend\",\r\n        })\r\n      );\r\n\r\n      // let chatArea = document.getElementById(\"chatArea\");\r\n      // chatArea.scrollTop = chatArea.scrollHeight;\r\n\r\n      setMessage(\"\");\r\n    }\r\n  };\r\n  const handleScroll = () => {\r\n    let body = document.body;\r\n    let chatArea = document.querySelector(\".chatArea\");\r\n    chatArea = chatArea.clientHeight ? chatArea : body;\r\n\r\n    if (chatArea.scrollTop == 0) {\r\n      // const users = { uid_1: auth.uid, uid_2: userSelected.uid,lastestDoc };\r\n      // dispatch(getLoadMoreConversations(users))\r\n      // console.log(users)\r\n    }\r\n  };\r\n  const handleSeen = (e) => {\r\n    dispatch(setSeenMessage({ uid_1: auth.uid, uid_2: userSelected.uid }));\r\n  };\r\n  const handleCloseFriendBox = (e) => {\r\n    e.stopPropagation();\r\n    if (menuSelected >= 0) {\r\n      const myTarget = document.querySelectorAll(\".userMenu\")[menuSelected];\r\n      const clicked = e.target.className;\r\n      if (clicked !== myTarget) {\r\n        myTarget.classList.remove(\"open\");\r\n        setMenuSelected(-1);\r\n      }\r\n    }\r\n  };\r\n  const handleOpenFriendBox = (e, index) => {\r\n    e.stopPropagation();\r\n    document.querySelectorAll(\".userMenu\")[index].classList.add(\"open\");\r\n    setMenuSelected(index);\r\n    if (menuSelected >= 0) {\r\n      document\r\n        .querySelectorAll(\".userMenu\")\r\n        [menuSelected].classList.remove(\"open\");\r\n    }\r\n  };\r\n  return (\r\n    <Layout>\r\n      <div className=\"homePage\">\r\n        <div className=\"friendListWrap\">\r\n          {!loadingUser ? (\r\n            <div className=\"friendList\">\r\n              {users.map((item, index) => (\r\n                <div\r\n                  key={index}\r\n                  onClick={() => {\r\n                    initChat(item);\r\n                    selectItem(index);\r\n                  }}\r\n                  className=\"friend\"\r\n                >\r\n                  <div className=\"avatar\">\r\n                    <img\r\n                      src={item.avatarUrl != null ? item.avatarUrl : noavt}\r\n                      alt=\"avatar\"\r\n                    />\r\n                    <span\r\n                      className={item.isOnline ? \"isOnline\" : \"isOffline\"}\r\n                    ></span>\r\n                  </div>\r\n                  <div className=\"friendState\">\r\n                    <p className=\"friendName\">\r\n                      {item.firstName + \" \" + item.lastName}\r\n                    </p>\r\n                    <div className=\"friendLastText\">\r\n                      <p className=\"lastText\">See you again </p>\r\n                      <span></span>\r\n                      <p>4 hours ago</p>\r\n                    </div>\r\n                  </div>\r\n                  <div\r\n                    className=\"friendButton\"\r\n                    onClick={(e) => {\r\n                      index !== menuSelected\r\n                        ? handleOpenFriendBox(e, index)\r\n                        : handleCloseFriendBox(e, index);\r\n                    }}\r\n                  >\r\n                    <button>\r\n                      <div className=\"circle\"></div>\r\n                      <div className=\"circle\"></div>\r\n                      <div className=\"circle\"></div>\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"userMenu\">\r\n                    <div className=\"menuGroup\">\r\n                      <div className=\"menuItem\">\r\n                        <AiOutlineUser className=\"icon\" />\r\n                        <NavLink to={`/profile/${item.key}`}>\r\n                          Go to profile page\r\n                        </NavLink>\r\n                      </div>\r\n                      <div className=\"menuItem\">\r\n                        <AiOutlineBell className=\"icon\" />\r\n                        <span>Turn off notification</span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"menuGroup\">\r\n                      <div className=\"menuItem\">\r\n                        <AiOutlineDelete className=\"icon\" />\r\n                        <span>Delete conversation</span>\r\n                      </div>\r\n                      <div className=\"menuItem\">\r\n                        <AiOutlineLock className=\"icon\" />\r\n                        <span>Block</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <div className=\" loading\">\r\n              <BiLoaderCircle className=\"icon\" />\r\n            </div>\r\n          )}\r\n        </div>\r\n        {userSelected !== \"\" ? (\r\n          <div className=\"chatBox\">\r\n            <div className=\"headBox\">\r\n              <div className=\"headUser\">\r\n                <img\r\n                  alt=\"avatar\"\r\n                  src={\r\n                    userSelected.avatarUrl != null\r\n                      ? userSelected.avatarUrl\r\n                      : noavt\r\n                  }\r\n                />\r\n                <NavLink to={`/profile/${userSelected.key}`}>\r\n                  <p>{userSelected.firstName}</p>\r\n                </NavLink>\r\n              </div>\r\n              <div className=\"headCall\">\r\n                <AiOutlinePhone className=\"icon\" />\r\n                <BsCameraVideo className=\"icon\" />\r\n\r\n                <AiOutlineInfoCircle className=\"icon\" />\r\n              </div>\r\n            </div>\r\n            {!loadingChat ? (\r\n              <div onScroll={handleScroll} id=\"chatArea\" className=\"chatArea\">\r\n                <div className=\"chatAreaWrap\">\r\n                  {conversations.map((item, index) => (\r\n                    <div\r\n                      key={index}\r\n                      className={\r\n                        auth.uid === item.user_uid_1\r\n                          ? \"chatWrapper right\"\r\n                          : \"chatWrapper left\"\r\n                      }\r\n                    >\r\n                      {auth.uid !== item.user_uid_1 ? (\r\n                        <img\r\n                          alt={index}\r\n                          className=\"avatar\"\r\n                          src={\r\n                            userSelected.avatarUrl !== null\r\n                              ? userSelected.avatarUrl\r\n                              : noavt\r\n                          }\r\n                        />\r\n                      ) : (\r\n                        <></>\r\n                      )}\r\n                      {item.type !== \"file\" ? (\r\n                        <div className=\"messageWrap\">\r\n                          <p key={index}>{item.message}</p>\r\n                        </div>\r\n                      ) : (\r\n                        <img\r\n                          className=\"messageFile\"\r\n                          alt={index}\r\n                          src={item.file}\r\n                          key={index}\r\n                        />\r\n                      )}\r\n                      <AiOutlineCheckCircle\r\n                        className={\r\n                          auth.uid === item.user_uid_1 && !item.isView\r\n                            ? \"icon\"\r\n                            : \"icon gone\"\r\n                        }\r\n                      />\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"chatArea loading\">\r\n                <BiLoaderCircle className=\"icon\" />\r\n              </div>\r\n            )}\r\n            <div className=\"typeArea\">\r\n              <div className=\"action\">\r\n                <div className=\"fileSend\">\r\n                  <img alt=\"messageImg\" id=\"messageImg\" />\r\n\r\n                  <div className=\"before\"></div>\r\n                  <AiOutlineSend onClick={submitMessageFile} className=\"icon\" />\r\n                </div>\r\n                <div className=\"actionWrap\">\r\n                  <input type=\"file\" className=\"fileInput\" />\r\n                  <AiOutlinePlusCircle className=\"icon\" />\r\n                </div>\r\n                <div className=\"actionWrap\">\r\n                  <input type=\"file\" id=\"fileInput\" className=\"fileInput\" />\r\n                  <AiOutlinePicture onClick={openFile} className=\"icon\" />\r\n                </div>\r\n                <div className=\"actionWrap\">\r\n                  <input type=\"file\" className=\"fileInput\" />\r\n                  <MdTagFaces className=\"icon\" />\r\n                </div>\r\n                <div className=\"actionWrap\">\r\n                  <input type=\"file\" className=\"fileInput\" />\r\n                  <AiOutlineFileGif className=\"icon\" />\r\n                </div>\r\n              </div>\r\n              <div className=\"input\">\r\n                <form onSubmit={submitMessage}>\r\n                  <input\r\n                    value={message}\r\n                    onClick={() => handleSeen()}\r\n                    onChange={(e) => setMessage(e.target.value)}\r\n                    type=\"text\"\r\n                    placeholder=\"Aa\"\r\n                  />\r\n                </form>\r\n                <MdTagFaces className=\"icon\" />\r\n              </div>\r\n              <div className=\"likeButton\">\r\n                {message === \"\" ? (\r\n                  <AiOutlineHeart className=\"icon\" />\r\n                ) : (\r\n                  <AiOutlineSend onClick={submitMessage} className=\"icon\" />\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"chatBox unSelected\">\r\n            <RiSendPlaneFill className=\"bigIcon\" />\r\n            <Title>Your Message</Title>\r\n            <p>Send private photos and messages to a friend or group.</p>\r\n            <Button>Send a message</Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\nexport default Home;\r\n","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\index.js",[],["177","178"],"C:\\Website By Mint\\realtime-chat-application\\src\\containers\\SignUpPage\\index.js",[],["179","180"],"C:\\Website By Mint\\realtime-chat-application\\src\\components\\Header\\index.js",["181"],"import React from \"react\";\r\nimport \"./style.scss\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { isLoggedInUser, logout } from \"../../actions\";\r\nimport Logo from \"../../images/100ppi/Asset 2.png\";\r\nexport default function Header() {\r\n  const auth = useSelector((state) => state.auth);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleLogout = () => {\r\n    dispatch(logout(auth.uid));\r\n  };\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"navBar\">\r\n        <NavLink to='/realtime-chat-application' className=\"logoArea\">\r\n          <img src={Logo} alt=\"logo\" />\r\n        </NavLink>\r\n        <div className=\"navSide\">\r\n          {!auth.authenticated ? (\r\n            <ul className=\"navWrap\">\r\n              <li className=\"navItem\">\r\n              <NavLink to=\"/realtime-chat-application\" className=\"navLink\">\r\n                Message\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"navItem\">\r\n              <NavLink to=\"/newfeed\" className=\"navLink\">\r\n                New Feed\r\n              </NavLink>\r\n            </li>\r\n              <li className=\"navItem\">\r\n                <NavLink to=\"/login\" className=\"navLink\">\r\n                  Login\r\n                </NavLink>\r\n              </li>\r\n              <li className=\"navItem\">\r\n                <NavLink to=\"/signup\" className=\"navLink\">\r\n                  Sign Up\r\n                </NavLink>\r\n              </li>\r\n            </ul>\r\n          ) : (\r\n            <ul className=\"navWrap\">\r\n              <li className=\"navItem\">\r\n              <NavLink to=\"/realtime-chat-application\" className=\"navLink\">\r\n                Message\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"navItem\">\r\n              <NavLink to=\"/newfeed\" className=\"navLink\">\r\n                New Feed\r\n              </NavLink>\r\n            </li>\r\n              <li className=\"navItem\">\r\n                <NavLink\r\n                  to={{\r\n                    pathname: `/profile/${auth.uid}`,\r\n                    state: { uid: auth.uid },\r\n                  }}\r\n                  className=\"navLink\"\r\n                >\r\n                  {auth.firstName} Profile\r\n                </NavLink>\r\n              </li>\r\n              <li className=\"navItem\">\r\n                <Link to=\"#\" onClick={handleLogout} className=\"navLink\">\r\n                  Log out\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Input\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Button\\index.js",[],["182","183"],"C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Title\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Card\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\store\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\actions\\auth.js",["184"],"import firebase from \"../database/firebase\";\r\nimport { authConstants } from \"./constants\";\r\nexport const signUp = (user) => {\r\n  return async (dispatch) => {\r\n    const db = firebase.firestore();\r\n    dispatch({\r\n      type: `${authConstants.USER_LOGIN}_REQUEST`,\r\n    });\r\n    firebase\r\n      .auth()\r\n      .createUserWithEmailAndPassword(user.email, user.password)\r\n      .then((data) => {\r\n        const currentUser = firebase.auth().currentUser;\r\n        const name = `${user.firstName} ${user.lastName}`;\r\n        currentUser\r\n          .updateProfile({\r\n            displayName: name,\r\n          })\r\n          .then(() => {\r\n            db.collection(\"users\")\r\n              .doc(data.user.uid)\r\n              .set({\r\n                firstName: user.firstName,\r\n                lastName: user.lastName,\r\n                createdAt: new Date(),\r\n                uid: data.user.uid,\r\n                isOnline: true,\r\n              })\r\n              .then(() => {\r\n                const loggedUser = {\r\n                  firstName: user.firstName,\r\n                  lastName: user.lastName,\r\n                  uid: data.user.uid,\r\n                  email: user.email,\r\n                };\r\n                localStorage.setItem(\r\n                  \"user\",\r\n                  JSON.stringify({\r\n                    loggedUser,\r\n                  })\r\n                );\r\n                dispatch({\r\n                  type: `${authConstants.USER_LOGIN}_SUCCESS`,\r\n                  payload: { user: loggedUser },\r\n                });\r\n              })\r\n              .catch((err) => {\r\n                dispatch({\r\n                  type: `${authConstants.USER_LOGIN}_FAILURE`,\r\n                  payload: err,\r\n                });\r\n              });\r\n          });\r\n      })\r\n      .catch((error) => {\r\n        dispatch({\r\n          type: `${authConstants.USER_LOGIN}_FAILURE`,\r\n          payload: { error: error.message },\r\n        });\r\n      });\r\n  };\r\n};\r\n\r\nexport const signIn = (user) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: `${authConstants.USER_LOGIN}_REQUEST`,\r\n    });\r\n    const db = firebase.firestore();\r\n    firebase\r\n      .auth()\r\n      .signInWithEmailAndPassword(user.email, user.password)\r\n      .then((data) => {\r\n        db.collection(\"users\")\r\n          .doc(data.user.uid)\r\n          .update({\r\n            isOnline: true,\r\n          })\r\n          .then(() => {\r\n            var name = data.user.displayName;\r\n            const avatarUrl = data.user.photoURL;\r\n            name = name.split(\" \");\r\n            var stringArray = new Array();\r\n            for (var i = 0; i < name.length; i++) {\r\n              stringArray.push(name[i]);\r\n            }\r\n            const firstName = name[0];\r\n            const lastName = name[1];\r\n            const loggedUser = {\r\n              firstName,\r\n              lastName,\r\n              uid: data.user.uid,\r\n              email: data.user.email,\r\n              avatarUrl,\r\n            };\r\n            localStorage.setItem(\r\n              \"user\",\r\n              JSON.stringify({\r\n                user: loggedUser,\r\n              })\r\n            );\r\n            dispatch({\r\n              type: `${authConstants.USER_LOGIN}_SUCCESS`,\r\n              payload: { user: loggedUser },\r\n            });\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        dispatch({\r\n          type: `${authConstants.USER_LOGIN}_FAILURE`,\r\n          payload: { error: err.message },\r\n        });\r\n      });\r\n  };\r\n};\r\n\r\nexport const isLoggedInUser = () => {\r\n  return async (dispatch) => {\r\n    const user = localStorage.getItem(\"user\")\r\n      ? JSON.parse(localStorage.getItem(\"user\"))\r\n      : null;\r\n    if (user) {\r\n      dispatch({\r\n        type: `${authConstants.USER_LOGIN}_SUCCESS`,\r\n        payload: { user: user.user },\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: `${authConstants.USER_LOGIN}_FAILURE`,\r\n        payload: { error: \"\" },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const logout = (uid) => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: `${authConstants.USER_LOGOUT}_REQUEST` });\r\n    const db = firebase.firestore();\r\n    db.collection(\"users\")\r\n      .doc(uid)\r\n      .update({\r\n        isOnline: false,\r\n      })\r\n      .then(() => {\r\n        firebase\r\n          .auth()\r\n          .signOut()\r\n          .then(() => {\r\n            localStorage.clear();\r\n            dispatch({ type: `${authConstants.USER_LOGOUT}_SUCCESS` });\r\n          })\r\n          .catch((err) => {\r\n            dispatch({\r\n              type: `${authConstants.USER_LOGOUT}_FAILURE`,\r\n              payload: { error: err },\r\n            });\r\n          });\r\n      });\r\n  };\r\n};\r\n\r\n","C:\\Website By Mint\\realtime-chat-application\\src\\reducers\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\database\\firebase.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\actions\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\reducers\\authReducer.js",["185"],"import { authConstants } from \"../actions/constants\";\r\n\r\nconst initialState = {\r\n  firstName: \"\",\r\n  lastName: \"\",\r\n  uid: \"\",\r\n  email: \"\",\r\n  avatarUrl: \"\",\r\n  authenticating: false,\r\n  authenticated: false,\r\n  error: null,\r\n  notify: \"\",\r\n  updating : false,\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case `${authConstants.USER_LOGIN}_REQUEST`:\r\n      state = {\r\n        ...state,\r\n        authenticating: true,\r\n      };\r\n      return state;\r\n    case `${authConstants.USER_LOGIN}_SUCCESS`:\r\n      state = {\r\n        ...state,\r\n        firstName: action.payload.user.firstName,\r\n        lastName: action.payload.user.lastName,\r\n        uid: action.payload.user.uid,\r\n        email: action.payload.user.email,\r\n        avatarUrl: action.payload.user.avatarUrl,\r\n        authenticated: true,\r\n        authenticating: false,\r\n        error: null,\r\n      };\r\n      return state;\r\n\r\n    case `${authConstants.USER_LOGIN}_FAILURE`:\r\n      state = {\r\n        ...state,\r\n        authenticated: false,\r\n        authenticating: false,\r\n        error: action.payload.error,\r\n      };\r\n      return state;\r\n\r\n    case `${authConstants.USER_LOGOUT}_REQUEST`:\r\n      return state;\r\n\r\n    case `${authConstants.USER_LOGOUT}_SUCCESS`:\r\n      state = {\r\n        ...initialState,\r\n      };\r\n      return state;\r\n\r\n    case `${authConstants.USER_LOGOUT}_FAILURE`:\r\n      state = {\r\n        ...state,\r\n        error: action.payload.error,\r\n      };\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Private\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\actions\\constants.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\actions\\user.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\reducers\\userReducer.js",["186"],"import { userConstants } from \"../actions/constants\";\r\n\r\nconst initialState = {\r\n  users: [],\r\n  conversations: [],\r\n  loadingUser: true,\r\n  loadingChat: true,\r\n  lastestDoc: {},\r\n  loadingUserByKey: false,\r\n  userByKey: {\r\n    posts : []\r\n  },\r\n  error: \"\",\r\n  notify : \"\",\r\n  updating :false,\r\n};\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case `${userConstants.GET_REALTIME_USERS}_REQUEST`:\r\n      state = {\r\n        ...state,\r\n        loadingUser: true,\r\n      };\r\n      return state;\r\n    case `${userConstants.GET_REALTIME_USERS}_SUCCESS`:\r\n      state = {\r\n        ...state,\r\n        loadingUser: false,\r\n        users: action.payload.users,\r\n      };\r\n      return state;\r\n    case `${userConstants.GET_REALTIME_MESSAGE}_REQUEST`:\r\n      state = {\r\n        ...state,\r\n        loadingChat: true,\r\n      };\r\n      return state;\r\n    case `${userConstants.GET_REALTIME_MESSAGE}_SUCCESS`:\r\n      state = {\r\n        ...state,\r\n        loadingChat: false,\r\n        conversations: action.payload.conversations,\r\n        lastestDoc: action.payload.lastDoc,\r\n      };\r\n      return state;\r\n    case `${userConstants.GET_LOADMORE_MESSAGE}_REQUEST`:\r\n      state = {\r\n        ...state,\r\n        loadingChat: true,\r\n      };\r\n      return state;\r\n    case `${userConstants.GET_LOADMORE_MESSAGE}_SUCCESS`:\r\n      state = {\r\n        ...state,\r\n        loadingChat: false,\r\n        conversations: [\r\n          ...action.payload.conversations,\r\n          ...state.conversations,\r\n        ],\r\n        lastestDoc: action.payload.lastestDoc,\r\n      };\r\n      return state;\r\n    case `${userConstants.GET_LOADMORE_MESSAGE}_FAILURE`:\r\n      state = {\r\n        ...state,\r\n      };\r\n      return state;\r\n    case `${userConstants.GET_USER_PROFILE_BY_ID}_REQUEST`:\r\n      state = {\r\n        ...state,\r\n        loadingUserByKey: true,\r\n      };\r\n      return state;\r\n    case `${userConstants.GET_USER_PROFILE_BY_ID}_SUCCESS`:\r\n      state = {\r\n        ...state,\r\n        loadingUserByKey: false,\r\n        userByKey: action.payload.userByKey,\r\n      };\r\n      return state;\r\n    case `${userConstants.GET_USER_PROFILE_BY_ID}_FAILURE`:\r\n      state = {\r\n        ...state,\r\n        error: action.payload.error,\r\n      };\r\n      return state;\r\n      case `${userConstants.UPDATE_USER_AVATAR}_REQUEST`:\r\n        state={\r\n          ...state,\r\n          updating:true\r\n        }\r\n        return state;\r\n      case `${userConstants.UPDATE_USER_AVATAR}_SUCCESS`:\r\n        state = {\r\n          ...state,\r\n          updating : false,\r\n          notify: action.payload.notify,\r\n          userByKey : {\r\n            ...state.userByKey,\r\n            avatarUrl: action.payload.avatarUrl,\r\n          }\r\n        };\r\n        return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Error\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\containers\\ProfilePage\\index.js",["187"],"C:\\Website By Mint\\realtime-chat-application\\src\\components\\ModalPost\\index.js",["188","189","190","191"],"import React from \"react\";\r\nimport \"./style.scss\";\r\nimport { AiOutlineClose, AiOutlinePicture } from \"react-icons/ai\";\r\nimport Mint from \"../../images/mint.jpg\";\r\nimport { BiLock, BiMap } from \"react-icons/bi\";\r\nimport Title from \"../../components/Layout/UI/Title/index\";\r\nimport Button from \"../Layout/UI/Button\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { pushPost } from \"../../actions/post\";\r\nconst ModalPost = () => {\r\n  const dispatch = useDispatch();\r\n  const auth = useSelector((state) => state.auth);\r\n\r\n  const [postImage, setPostImage] = React.useState(\"\");\r\n\r\n  const closeModalPost = () => {\r\n    document.querySelector(\".modalPost\").classList.remove(\"open\");\r\n  };\r\n  const filePost = document.getElementById(\"filePost\");\r\n  const postImageElement = document.getElementById(\"postImageElement\");\r\n  const openFileInput = () => {\r\n    filePost.click();\r\n    setPostImage(\"advanced\");\r\n  };\r\n  const imageBox = document.querySelector(\".imageBox\");\r\n  const viewFile = (e) => {\r\n \r\n    imageBox.classList.add(\"hasFile\");\r\n\r\n    // console.log(filePost.files.length);\r\n    if (filePost.files.length > 0) {\r\n      postImageElement.src = URL.createObjectURL(filePost.files[0]);\r\n    }\r\n    setPostImage(\"\");\r\n  };\r\n  React.useEffect(() => {\r\n    if (postImage != \"\") {\r\n      filePost.addEventListener(\"change\", viewFile);\r\n    }\r\n  }, [postImage]);\r\n  const handlePost = () => {\r\n    var postText = document.getElementById(\"postText\").value;\r\n    if (filePost.files.length > 0) {\r\n      const post = {\r\n        file: filePost.files[0],\r\n        status: postText,\r\n        uid:auth.uid\r\n      };\r\n      dispatch(pushPost(post));\r\n      imageBox.classList.remove(\"hasFile\");\r\n      postImageElement.src = \"\";\r\n      postText = \"\";\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"modalPost\">\r\n      <div className=\"modalWrapper\">\r\n        <div className=\"head\">\r\n          <div className=\"title\">\r\n            <Title>Make a post</Title>\r\n          </div>\r\n          <AiOutlineClose onClick={closeModalPost} className=\"icon\" />\r\n        </div>\r\n        <div className=\"poster\">\r\n          <div className=\"posterImage\">\r\n            <img src={Mint} />\r\n          </div>\r\n          <div className=\"posterName\">\r\n            <p>Mint</p>\r\n            <div className=\"securityMode\">\r\n              <BiLock className=\"icon\" />\r\n              <span>Private</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"statusBox\">\r\n          <textarea\r\n            id=\"postText\"\r\n            placeholder=\"What are you thinking ?\"\r\n          ></textarea>\r\n          <div className=\"imageBox\">\r\n            <img id=\"postImageElement\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"postButton\">\r\n          <Button onClick={handlePost}>Post</Button>\r\n          <div className=\"postIcon\">\r\n            <input type=\"file\" id=\"filePost\" />\r\n            <AiOutlinePicture onClick={openFileInput} className=\"icon\" />\r\n            <BiMap className=\"icon\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default ModalPost;\r\n",["192","193"],"C:\\Website By Mint\\realtime-chat-application\\src\\components\\PostDetail\\index.js",["194"],"import React from \"react\";\r\nimport \"./style.scss\";\r\nimport Mint from \"../../images/mint.jpg\";\r\nimport {\r\n  AiOutlineSend,\r\n  AiFillHeart,\r\n  AiOutlineHeart,\r\n  AiOutlineClose,\r\n} from \"react-icons/ai\";\r\nimport { VscBookmark } from \"react-icons/vsc\";\r\nimport { BsChat } from \"react-icons/bs\";\r\nimport Button from \"../Layout/UI/Button\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Loading from \"../Layout/UI/Loading\";\r\nimport { pushPostComment } from \"../../actions/post\";\r\nimport { getRealtimeInteractions, updateLike } from \"../../actions\";\r\nconst PostDetail = ({auth}) => {\r\n  const dispatch = useDispatch();\r\n  const [replySelected, setReplySelected] = React.useState([]);\r\n  const [commentValue, setCommentValue] = React.useState(\"\");\r\n  const { post, interaction } = useSelector((state) => state);\r\n  const auth_uid = React.useMemo(()=>{\r\n    return auth\r\n  },[auth])\r\n  const interactionArr = React.useMemo(() => {\r\n    return interaction.interactions;\r\n  }, [interaction.interactions]);\r\n  const { item, loading, comments } = React.useMemo(() => {\r\n    return {\r\n      item: post.postByKey.item,\r\n      loading: post.postByKey.loading,\r\n      comments: post.postByKey.comments,\r\n    };\r\n  }, [post.postByKey.item, post.postByKey.comments]);\r\n  React.useEffect(() => {\r\n    dispatch(getRealtimeInteractions(item.key));\r\n  }, [item.key,dispatch]);\r\n  const closePostDetail = () => {\r\n    const postDetail = document.querySelector(\".postDetail\");\r\n    postDetail.classList.remove(\"open\");\r\n    const replies = document.querySelector(\".replies\");\r\n    if (replies != null) {\r\n      replies.classList.remove(\"view\");\r\n      const newArr = [];\r\n      setReplySelected(newArr);\r\n    }\r\n  };\r\n  const hanldePostComment = (e) => {\r\n    e.preventDefault();\r\n    const comment = {\r\n      content: commentValue,\r\n      pid: item.key,\r\n      uid: auth_uid,\r\n    };\r\n    dispatch(pushPostComment(comment));\r\n    setCommentValue(\"\");\r\n  };\r\n  const openReplyComment = (index) => {\r\n    const newArr = [...replySelected];\r\n\r\n    document.querySelectorAll(\".replies\")[index].classList.add(\"view\");\r\n    newArr[index] = true;\r\n    setReplySelected(newArr);\r\n  };\r\n\r\n  const closeReplyComment = (index) => {\r\n    const newArr = [...replySelected];\r\n    document.querySelectorAll(\".replies\")[index].classList.remove(\"view\");\r\n    newArr[index] = false;\r\n    setReplySelected(newArr);\r\n  };\r\n  const handleLikePost = () => {\r\n    const obj = {\r\n      pid: item.key,\r\n      uid: auth_uid,\r\n    };\r\n    dispatch(updateLike(obj));\r\n  };\r\n  const isInArray = (arr)=> {\r\n    console.log(interactionArr)\r\n      if(arr.length>0)\r\n      {\r\n        for (let i =0;i<arr.length;i++) {\r\n          console.log(arr[i].uid)\r\n          if(arr[i].uid===auth_uid)\r\n          {\r\n            return true;\r\n          }\r\n        }\r\n        return false\r\n      }\r\n      else{\r\n        return false\r\n      }\r\n    \r\n  }\r\n  return (\r\n    <div className=\"postDetail\">\r\n      <AiOutlineClose className=\"exit\" onClick={closePostDetail} />\r\n      {loading ? (\r\n        <Loading />\r\n      ) : (\r\n        <div className=\"postWrapper\">\r\n          <div className=\"postImage\">\r\n            <img src={item.file} alt={item.key} />\r\n          </div>\r\n          <div className=\"postStatus\">\r\n            <div className=\"postOwner\">\r\n              <div className=\"ownerAvatar\">\r\n                <div>\r\n                  <img src={item.owner.avatarUrl} alt={item.key} />\r\n                </div>\r\n                <p>{item.owner.firstName + \" \" + item.owner.lastName}</p>\r\n              </div>\r\n              <div className=\"more\">\r\n                <div className=\"circle\"></div>\r\n                <div className=\"circle\"></div>\r\n                <div className=\"circle\"></div>\r\n              </div>\r\n            </div>\r\n            <div className=\"postDescription\">\r\n              <div className=\"ownerAvatar\">\r\n                <div>\r\n                  <img src={item.owner.avatarUrl} alt={item.key} />\r\n                </div>\r\n                <p className=\"name\">\r\n                  {item.owner.firstName + \" \" + item.owner.lastName}\r\n                </p>\r\n                <p className=\"status\">{item.status}</p>\r\n              </div>\r\n              <div className=\"postedDate\">\r\n                <p>6d</p>\r\n              </div>\r\n              <div className=\"commentBox\">\r\n                {comments.map((item, index) => (\r\n                  <div key={index} className=\"comment\">\r\n                    <div className=\"ownerImage\">\r\n                      <div className='wrap'>\r\n                      <img\r\n                        src={item.sender.avatarUrl}\r\n                        alt={item.sender.firstName}\r\n                      />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"ownerDetail\">\r\n                      <div className=\"ownerName\">\r\n                        <div className=\"content\">\r\n                          {\" \"}\r\n                          <p>{item.sender.firstName}</p>\r\n                          <p>{item.content}</p>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"reply\">\r\n                        <span>4d</span>\r\n                        <p>Reply</p>\r\n                        <div className=\"heartIcon\">\r\n                          <AiOutlineHeart className=\"icon\" />\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"viewReplies\">\r\n                        <div className=\"line\"></div>\r\n                        {replySelected[index] ? (\r\n                          <p onClick={() => closeReplyComment(index)}>\r\n                            Hide replies(2)\r\n                          </p>\r\n                        ) : (\r\n                          <p onClick={() => openReplyComment(index)}>\r\n                            View replies(2)\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                      <div className=\"replies\">\r\n                        <div className=\"replyItem\">\r\n                          <div className=\"ownerImage\">\r\n                            <img src={Mint} alt={Mint} />\r\n                          </div>\r\n                          <div className=\"ownerDetail\">\r\n                            <div className=\"ownerName\">\r\n                              <div className=\"content\">\r\n                                {\" \"}\r\n                                <p>mint_stillwalks</p>\r\n                                <p>{item.content}</p>\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div className=\"reply\">\r\n                              <span>4d</span>\r\n                              <p>Reply</p>\r\n                              <div className=\"heartIcon\">\r\n                                <AiOutlineHeart className=\"icon\" />\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n              <div className=\"postLiked\">\r\n                <div className=\"iconBox\">\r\n                  <div className=\"likeIcon\">\r\n                    {isInArray(interactionArr) ? (\r\n                      <AiFillHeart onClick={handleLikePost} className=\"icon\" />\r\n                    ) : (\r\n                      <AiOutlineHeart\r\n                        onClick={handleLikePost}\r\n                        className=\"icon\"\r\n                      />\r\n                    )}\r\n\r\n                    <BsChat className=\"icon\" />\r\n                    <AiOutlineSend className=\"icon\" />\r\n                  </div>\r\n                  <div className=\"saveIcon\">\r\n                    <VscBookmark className=\"icon\" />\r\n                  </div>\r\n                </div>\r\n                <div className=\"likedBy\">\r\n                  <p>Liked by {interactionArr.length} peoples</p>\r\n                  <p>{item.createdAt.toDate().toDateString()}</p>\r\n                </div>\r\n              </div>\r\n              <form className=\"commentInput\">\r\n                <div className=\"input\">\r\n                  <input\r\n                    onChange={(e) => setCommentValue(e.target.value)}\r\n                    value={commentValue}\r\n                    id=\"postComment\"\r\n                    placeholder=\"Add comment here\"\r\n                  />\r\n                </div>\r\n                <div className=\"button\">\r\n                  <Button type=\"submit\" onClick={hanldePostComment}>\r\n                    Post\r\n                  </Button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default PostDetail;\r\n","C:\\Website By Mint\\realtime-chat-application\\src\\actions\\post.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\reducers\\postReducer.js",["195","196","197"],"C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Loading\\index.js",[],["198","199"],"C:\\Website By Mint\\realtime-chat-application\\src\\components\\ModalUpdateAvatar\\index.js",["200","201","202"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./style.scss\";\r\nimport Button from \"../Layout/UI/Button\";\r\nimport Mint from \"../../images/mint.jpg\";\r\nimport { AiOutlineClose } from \"react-icons/ai\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateUserAvatar } from \"../../actions/user\";\r\nconst ModalUpdateAvatar = () => {\r\n    const dispatch = useDispatch()\r\n    const auth = useSelector(state => state.auth)\r\n  const [temp, setTemp] = useState(\"\");\r\n\r\n  const closeModalPost = () => {\r\n    modal.classList.remove('open')\r\n  };\r\n  let fileInput = useRef(null);\r\n  let imgSrc = useRef(null);\r\n  let modal = useRef(null)\r\n  const openFileInput = () => {\r\n    fileInput.click();\r\n    setTemp(\"advanced\");\r\n  };\r\n  const viewPhoto = () => {\r\n    if (fileInput.files.length > 0) {\r\n      imgSrc.src = URL.createObjectURL(fileInput.files[0]);\r\n    }\r\n  };\r\n  const handleUpdateAvatar = ()=>{\r\n      dispatch(updateUserAvatar(auth.uid,fileInput.files[0]))\r\n  }\r\n  useEffect(() => {\r\n    if (temp == \"advanced\") {\r\n      fileInput.addEventListener(\"change\", viewPhoto);\r\n    }\r\n  }, [temp]);\r\n  return (\r\n    <div ref={el=>modal=el} className=\"modalUpdateAvatar\">\r\n      <div className=\"modalWrapper\">\r\n        <AiOutlineClose onClick={closeModalPost} className=\"icon\" />\r\n        <div className=\"modalTitle\">\r\n          <p>Update Avatar</p>\r\n        </div>\r\n        <div className=\"openFile\">\r\n          <button onClick={openFileInput}>Choose a file</button>\r\n          <input\r\n            type=\"file\"\r\n            className=\"input\"\r\n            ref={(el) => {\r\n              fileInput = el;\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"avatarBox\">\r\n          <div className=\"avatarWrap\">\r\n            <img\r\n              id=\"image\"\r\n              ref={(el) => {\r\n                imgSrc = el;\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"updateBtn\">\r\n          <Button onClick={handleUpdateAvatar}>Save</Button>\r\n          <Button onClick={closeModalPost}>Cancel</Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default ModalUpdateAvatar;\r\n","C:\\Website By Mint\\realtime-chat-application\\src\\actions\\interaction.js",["203"],"import firebase from \"../database/firebase\";\r\nimport { interactionConstants } from \"./constants\";\r\nfunction isEmpty(obj) {\r\n  for (var prop in obj) {\r\n    if (obj.hasOwnProperty(prop)) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\nexport const updateLike = (interaction) => {\r\n  return async (dispatch) => {\r\n    const db = firebase.firestore();\r\n    const postRef = db.collection('posts')\r\n    db.collection(\"interactions\")\r\n      .where(\"uid\", \"==\", interaction.uid)\r\n      .where(\"pid\", \"==\", interaction.pid)\r\n      .limit(1)\r\n      .get()\r\n      .then((snapshot) => {\r\n        let newObj = {};\r\n        snapshot.forEach((doc) => {\r\n          newObj = {\r\n            key: doc.id,\r\n            ...doc.data(),\r\n          };\r\n        });\r\n\r\n        const empty = isEmpty(newObj);\r\n        if (empty) {\r\n          dispatch({ type: `${interactionConstants.UPDATE_LIKE}_REQUEST` });\r\n          db.collection(\"interactions\")\r\n            .add({\r\n              ...interaction,\r\n              createdAt: new Date(),\r\n            })\r\n            .then(() => {\r\n              postRef.doc(interaction.pid).update({\r\n                likeCount: firebase.firestore.FieldValue.increment(1)\r\n            });\r\n              dispatch({\r\n                type: `${interactionConstants.UPDATE_LIKE}_SUCCESS`,\r\n              });\r\n            })\r\n            .catch((error) => {\r\n              dispatch({\r\n                type: `${interactionConstants.UPDATE_LIKE}_FAILURE`,\r\n                payload: { error },\r\n              });\r\n            });\r\n        } else {\r\n          dispatch({ type: `${interactionConstants.UPDATE_LIKE}_REQUEST` });\r\n          db.collection(\"interactions\")\r\n            .doc(newObj.key)\r\n            .delete()\r\n            .then(() => {\r\n              postRef.doc(interaction.pid).update({\r\n                likeCount: firebase.firestore.FieldValue.increment(-1)\r\n            });\r\n              dispatch({\r\n                type: `${interactionConstants.UPDATE_LIKE}_SUCCESS`,\r\n              });\r\n            })\r\n            .catch((error) => {\r\n              dispatch({\r\n                type: `${interactionConstants.UPDATE_LIKE}_FAILURE`,\r\n                payload: { error },\r\n              });\r\n            });\r\n        }\r\n      });\r\n  };\r\n};\r\nexport const getRealtimeInteractions = (pid) => {\r\n  return async (dispatch) => {\r\n    if (pid != undefined) {\r\n      const db = firebase.firestore();\r\n      dispatch({\r\n        type: `${interactionConstants.GET_REALTIME_INTERACTIONS}_REQUEST`,\r\n      });\r\n      db.collection(\"interactions\")\r\n        .where(\"pid\", \"==\", pid)\r\n        .onSnapshot((snapshot) => {\r\n          const interactionArr = [];\r\n          snapshot.forEach((doc) => {\r\n            interactionArr.push(doc.data());\r\n          });\r\n          dispatch({\r\n            type: `${interactionConstants.GET_REALTIME_INTERACTIONS}_SUCCESS`,\r\n            payload: { interactions: interactionArr },\r\n          });\r\n        });\r\n    }\r\n  };\r\n};\r\n","C:\\Website By Mint\\realtime-chat-application\\src\\reducers\\interactionReducer.js",["204"],"import { interactionConstants } from \"../actions/constants\";\r\n\r\nconst initialState = {\r\n    interactions : [],\r\n    isLoading : false,\r\n    error : null,\r\n    notify : null,\r\n}\r\nexport default (state = initialState,action)=>{\r\n    switch (action.type) {\r\n        case `${interactionConstants.UPDATE_LIKE}_REQUEST`:\r\n            // state = {\r\n            //     ...state,\r\n            //     interactions : action.payload.interactions,\r\n            //     isLoading:true,\r\n            // }\r\n            return state;\r\n        case `${interactionConstants.GET_REALTIME_INTERACTIONS}_REQUEST`:\r\n            state = {\r\n                ...state,\r\n                isLoading:true,\r\n            };\r\n            return state;\r\n        case `${interactionConstants.GET_REALTIME_INTERACTIONS}_SUCCESS`:\r\n            state = {\r\n                ...state,\r\n                isLoading:false,\r\n                interactions : action.payload.interactions\r\n            }\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}","C:\\Website By Mint\\realtime-chat-application\\src\\containers\\NewFeedPage\\index.js",["205","206"],"C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\FormChat\\index.js",[],{"ruleId":"207","replacedBy":"208"},{"ruleId":"209","replacedBy":"210"},{"ruleId":"211","severity":1,"message":"212","line":3,"column":35,"nodeType":"213","messageId":"214","endLine":3,"endColumn":43},{"ruleId":"215","severity":1,"message":"216","line":20,"column":6,"nodeType":"217","endLine":20,"endColumn":8,"suggestions":"218"},{"ruleId":"207","replacedBy":"219"},{"ruleId":"209","replacedBy":"220"},{"ruleId":"207","replacedBy":"221"},{"ruleId":"209","replacedBy":"222"},{"ruleId":"211","severity":1,"message":"223","line":3,"column":8,"nodeType":"213","messageId":"214","endLine":3,"endColumn":12},{"ruleId":"211","severity":1,"message":"224","line":15,"column":3,"nodeType":"213","messageId":"214","endLine":15,"endColumn":20},{"ruleId":"211","severity":1,"message":"225","line":27,"column":3,"nodeType":"213","messageId":"214","endLine":27,"endColumn":27},{"ruleId":"211","severity":1,"message":"226","line":48,"column":5,"nodeType":"213","messageId":"214","endLine":48,"endColumn":15},{"ruleId":"215","severity":1,"message":"227","line":57,"column":6,"nodeType":"217","endLine":57,"endColumn":8,"suggestions":"228"},{"ruleId":"229","severity":1,"message":"230","line":77,"column":22,"nodeType":"231","messageId":"232","endLine":77,"endColumn":24},{"ruleId":"215","severity":1,"message":"233","line":86,"column":6,"nodeType":"217","endLine":86,"endColumn":20,"suggestions":"234"},{"ruleId":"229","severity":1,"message":"230","line":88,"column":22,"nodeType":"231","messageId":"232","endLine":88,"endColumn":24},{"ruleId":"215","severity":1,"message":"235","line":92,"column":6,"nodeType":"217","endLine":92,"endColumn":21,"suggestions":"236"},{"ruleId":"229","severity":1,"message":"230","line":94,"column":20,"nodeType":"231","messageId":"232","endLine":94,"endColumn":22},{"ruleId":"215","severity":1,"message":"237","line":97,"column":6,"nodeType":"217","endLine":97,"endColumn":18,"suggestions":"238"},{"ruleId":"229","severity":1,"message":"239","line":159,"column":28,"nodeType":"231","messageId":"232","endLine":159,"endColumn":30},{"ruleId":"207","replacedBy":"240"},{"ruleId":"209","replacedBy":"241"},{"ruleId":"207","replacedBy":"242"},{"ruleId":"209","replacedBy":"243"},{"ruleId":"211","severity":1,"message":"244","line":5,"column":10,"nodeType":"213","messageId":"214","endLine":5,"endColumn":24},{"ruleId":"207","replacedBy":"245"},{"ruleId":"209","replacedBy":"246"},{"ruleId":"247","severity":1,"message":"248","line":83,"column":31,"nodeType":"249","messageId":"250","endLine":83,"endColumn":42},{"ruleId":"251","severity":1,"message":"252","line":16,"column":1,"nodeType":"253","endLine":65,"endColumn":3},{"ruleId":"251","severity":1,"message":"252","line":17,"column":1,"nodeType":"253","endLine":107,"endColumn":3},{"ruleId":"215","severity":1,"message":"254","line":40,"column":6,"nodeType":"217","endLine":40,"endColumn":16,"suggestions":"255"},{"ruleId":"229","severity":1,"message":"230","line":38,"column":19,"nodeType":"231","messageId":"232","endLine":38,"endColumn":21},{"ruleId":"215","severity":1,"message":"256","line":41,"column":6,"nodeType":"217","endLine":41,"endColumn":17,"suggestions":"257"},{"ruleId":"258","severity":1,"message":"259","line":67,"column":13,"nodeType":"260","endLine":67,"endColumn":31},{"ruleId":"258","severity":1,"message":"259","line":83,"column":13,"nodeType":"260","endLine":83,"endColumn":42},{"ruleId":"207","replacedBy":"261"},{"ruleId":"209","replacedBy":"262"},{"ruleId":"215","severity":1,"message":"263","line":34,"column":6,"nodeType":"217","endLine":34,"endColumn":52,"suggestions":"264"},{"ruleId":"251","severity":1,"message":"252","line":16,"column":1,"nodeType":"253","endLine":108,"endColumn":3},{"ruleId":"265","severity":1,"message":"266","line":37,"column":5,"nodeType":"267","messageId":"268","endLine":41,"endColumn":20},{"ruleId":"265","severity":1,"message":"269","line":105,"column":5,"nodeType":"267","messageId":"270","endLine":106,"endColumn":20},{"ruleId":"207","replacedBy":"271"},{"ruleId":"209","replacedBy":"272"},{"ruleId":"211","severity":1,"message":"223","line":4,"column":8,"nodeType":"213","messageId":"214","endLine":4,"endColumn":12},{"ruleId":"229","severity":1,"message":"239","line":32,"column":14,"nodeType":"231","messageId":"232","endLine":32,"endColumn":16},{"ruleId":"258","severity":1,"message":"259","line":55,"column":13,"nodeType":"260","endLine":60,"endColumn":15},{"ruleId":"229","severity":1,"message":"230","line":77,"column":13,"nodeType":"231","messageId":"232","endLine":77,"endColumn":15},{"ruleId":"251","severity":1,"message":"252","line":9,"column":1,"nodeType":"253","endLine":34,"endColumn":2},{"ruleId":"211","severity":1,"message":"273","line":16,"column":8,"nodeType":"213","messageId":"214","endLine":16,"endColumn":14},{"ruleId":"215","severity":1,"message":"254","line":28,"column":6,"nodeType":"217","endLine":28,"endColumn":8,"suggestions":"274"},"no-native-reassign",["275"],"no-negated-in-lhs",["276"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'auth.authenticated' and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["277"],["275"],["276"],["275"],["276"],"'Mint' is defined but never used.","'AiFillCheckCircle' is defined but never used.","'getLoadMoreConversations' is defined but never used.","'lastestDoc' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'viewUser'. Either include it or remove the dependency array.",["278"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'auth.uid' and 'dispatch'. Either include them or remove the dependency array.",["279"],"React Hook useEffect has missing dependencies: 'loadingChat' and 'userSelected'. Either include them or remove the dependency array.",["280"],"React Hook useEffect has missing dependencies: 'img' and 'viewFile'. Either include them or remove the dependency array.",["281"],"Expected '===' and instead saw '=='.",["275"],["276"],["275"],["276"],"'isLoggedInUser' is defined but never used.",["275"],["276"],"no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["282"],"React Hook React.useEffect has missing dependencies: 'filePost' and 'viewFile'. Either include them or remove the dependency array.",["283"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["275"],["276"],"React Hook React.useMemo has a missing dependency: 'post.postByKey.loading'. Either include it or remove the dependency array.",["284"],"no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","Expected a 'break' statement before 'default'.","default",["275"],["276"],"'Button' is defined but never used.",["285"],"no-global-assign","no-unsafe-negation",{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},{"desc":"290","fix":"291"},{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},{"desc":"296","fix":"297"},{"desc":"298","fix":"299"},{"desc":"300","fix":"301"},{"desc":"302","fix":"303"},"Update the dependencies array to be: [auth.authenticated, dispatch]",{"range":"304","text":"305"},"Update the dependencies array to be: [viewUser]",{"range":"306","text":"307"},"Update the dependencies array to be: [auth.uid, dispatch, userSelected]",{"range":"308","text":"309"},"Update the dependencies array to be: [conversations, loadingChat, userSelected]",{"range":"310","text":"311"},"Update the dependencies array to be: [img, messageImg, viewFile]",{"range":"312","text":"313"},"Update the dependencies array to be: [dispatch, uidParam]",{"range":"314","text":"315"},"Update the dependencies array to be: [filePost, postImage, viewFile]",{"range":"316","text":"317"},"Update the dependencies array to be: [post.postByKey.item, post.postByKey.loading, post.postByKey.comments]",{"range":"318","text":"319"},"Update the dependencies array to be: [dispatch]",{"range":"320","text":"321"},[744,746],"[auth.authenticated, dispatch]",[1731,1733],"[viewUser]",[2637,2651],"[auth.uid, dispatch, userSelected]",[2845,2860],"[conversations, loadingChat, userSelected]",[2975,2987],"[img, messageImg, viewFile]",[1244,1254],"[dispatch, uidParam]",[1369,1380],"[filePost, postImage, viewFile]",[1219,1265],"[post.postByKey.item, post.postByKey.loading, post.postByKey.comments]",[1048,1050],"[dispatch]"]