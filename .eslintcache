[{"C:\\Website By Mint\\realtime-chat-application\\src\\reportWebVitals.js":"1","C:\\Website By Mint\\realtime-chat-application\\src\\App.js":"2","C:\\Website By Mint\\realtime-chat-application\\src\\containers\\LoginPage\\index.js":"3","C:\\Website By Mint\\realtime-chat-application\\src\\containers\\HomePage\\index.js":"4","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\index.js":"5","C:\\Website By Mint\\realtime-chat-application\\src\\containers\\SignUpPage\\index.js":"6","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Header\\index.js":"7","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Input\\index.js":"8","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Button\\index.js":"9","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Title\\index.js":"10","C:\\Website By Mint\\realtime-chat-application\\src\\index.js":"11","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Card\\index.js":"12","C:\\Website By Mint\\realtime-chat-application\\src\\store\\index.js":"13","C:\\Website By Mint\\realtime-chat-application\\src\\actions\\auth.js":"14","C:\\Website By Mint\\realtime-chat-application\\src\\reducers\\index.js":"15","C:\\Website By Mint\\realtime-chat-application\\src\\database\\firebase.js":"16","C:\\Website By Mint\\realtime-chat-application\\src\\actions\\index.js":"17","C:\\Website By Mint\\realtime-chat-application\\src\\reducers\\authReducer.js":"18","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Private\\index.js":"19","C:\\Website By Mint\\realtime-chat-application\\src\\actions\\constants.js":"20","C:\\Website By Mint\\realtime-chat-application\\src\\actions\\user.js":"21","C:\\Website By Mint\\realtime-chat-application\\src\\reducers\\userReducer.js":"22","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Error\\index.js":"23","C:\\Website By Mint\\realtime-chat-application\\src\\containers\\ProfilePage\\index.js":"24"},{"size":362,"mtime":1606470506103,"results":"25","hashOfConfig":"26"},{"size":1569,"mtime":1609404890696,"results":"27","hashOfConfig":"26"},{"size":1706,"mtime":1609310039203,"results":"28","hashOfConfig":"26"},{"size":10846,"mtime":1609510485720,"results":"29","hashOfConfig":"26"},{"size":247,"mtime":1608998879017,"results":"30","hashOfConfig":"26"},{"size":2147,"mtime":1609310046306,"results":"31","hashOfConfig":"26"},{"size":1987,"mtime":1609404907984,"results":"32","hashOfConfig":"26"},{"size":653,"mtime":1609004586761,"results":"33","hashOfConfig":"26"},{"size":199,"mtime":1609052758397,"results":"34","hashOfConfig":"26"},{"size":201,"mtime":1609005437418,"results":"35","hashOfConfig":"26"},{"size":360,"mtime":1609052155855,"results":"36","hashOfConfig":"26"},{"size":191,"mtime":1609002388353,"results":"37","hashOfConfig":"26"},{"size":320,"mtime":1609184533296,"results":"38","hashOfConfig":"26"},{"size":4583,"mtime":1609219758682,"results":"39","hashOfConfig":"26"},{"size":240,"mtime":1609145255369,"results":"40","hashOfConfig":"26"},{"size":556,"mtime":1609400435128,"results":"41","hashOfConfig":"26"},{"size":46,"mtime":1609144452389,"results":"42","hashOfConfig":"26"},{"size":1729,"mtime":1609225843900,"results":"43","hashOfConfig":"26"},{"size":517,"mtime":1609053109445,"results":"44","hashOfConfig":"26"},{"size":373,"mtime":1609256188091,"results":"45","hashOfConfig":"26"},{"size":5146,"mtime":1609401269833,"results":"46","hashOfConfig":"26"},{"size":1658,"mtime":1609340475211,"results":"47","hashOfConfig":"26"},{"size":308,"mtime":1609169470062,"results":"48","hashOfConfig":"26"},{"size":3637,"mtime":1609520063230,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"9th9bh",{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"89"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"52"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Website By Mint\\realtime-chat-application\\src\\reportWebVitals.js",[],["112","113"],"C:\\Website By Mint\\realtime-chat-application\\src\\App.js",["114"],"C:\\Website By Mint\\realtime-chat-application\\src\\containers\\LoginPage\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\containers\\HomePage\\index.js",["115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130"],"import React, { useEffect, useState } from \"react\";\r\nimport Layout from \"../../components/Layout/index\";\r\nimport Mint from \"../../images/mint.jpg\";\r\nimport Button from \"../../components/Layout/UI/Button/index\";\r\nimport \"./style.scss\";\r\nimport {\r\n  AiOutlinePlusCircle,\r\n  AiOutlineFileGif,\r\n  AiOutlinePicture,\r\n  AiOutlineHeart,\r\n  AiOutlinePhone,\r\n  AiOutlineInfoCircle,\r\n  AiOutlineSend,\r\n  AiOutlineCheckCircle,\r\n  AiFillCheckCircle,\r\n} from \"react-icons/ai\";\r\nimport { BiLoaderCircle } from \"react-icons/bi\";\r\nimport { RiSendPlaneFill } from \"react-icons/ri\";\r\nimport { BsCameraVideo } from \"react-icons/bs\";\r\nimport { MdTagFaces } from \"react-icons/md\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getLoadMoreConversations,\r\n  getRealTimeConversations,\r\n  getRealTimeUser,\r\n  setSeenMessage,\r\n  updateMessage,\r\n} from \"../../actions\";\r\nimport Title from \"../../components/Layout/UI/Title/index\";\r\nconst Home = () => {\r\n  const [isSelected, setIsSelected] = useState(\"\");\r\n  const [userSelected, setUserSelected] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [messageImg, setMessageImg] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n\r\n  const {\r\n    users,\r\n    conversations,\r\n    loadingUser,\r\n    loadingChat,\r\n    lastestDoc,\r\n  } = useSelector((state) => state.user);\r\n  const auth = useSelector((state) => state.auth);\r\n\r\n  const viewUser = () => {\r\n    dispatch(getRealTimeUser(auth.uid));\r\n  };\r\n  useEffect(() => {\r\n    viewUser();\r\n  }, []);\r\n  const selectItem = (index) => {\r\n    if (isSelected !== \"\") {\r\n      const prevItem = document.querySelectorAll(\".friend\")[isSelected];\r\n      prevItem.classList.remove(\"isSelected\");\r\n      const curItem = document.querySelectorAll(\".friend\")[index];\r\n      curItem.classList.add(\"isSelected\");\r\n      setIsSelected(index);\r\n    } else {\r\n      const curItem = document.querySelectorAll(\".friend\")[index];\r\n      curItem.classList.add(\"isSelected\");\r\n      setIsSelected(index);\r\n    }\r\n  };\r\n  const initChat = (user) => {\r\n    const users = { uid_1: auth.uid, uid_2: user.uid };\r\n    setUserSelected(user);\r\n    dispatch(getRealTimeConversations(users));\r\n  };\r\n  useEffect(() => {\r\n    if (userSelected != \"\") {\r\n      dispatch(\r\n        getRealTimeConversations({\r\n          uid_1: auth.uid,\r\n          uid_2: userSelected.uid,\r\n          type: \"afterSend\",\r\n        })\r\n      );\r\n    }\r\n  }, [userSelected]);\r\n  useEffect(() => {\r\n    if (userSelected != \"\" && !loadingChat) {\r\n      let chatArea = document.getElementById(\"chatArea\");\r\n      chatArea.scrollTop = chatArea.scrollHeight;\r\n    }\r\n  }, [conversations]);\r\n  useEffect(() => {\r\n    if (messageImg != \"\") {\r\n      img.addEventListener(\"change\", viewFile);\r\n    }\r\n  }, [messageImg]);\r\n\r\n  const img = document.getElementById(\"fileInput\");\r\n  const messImgElement = document.getElementById(\"messageImg\");\r\n  const openFile = (e) => {\r\n    img.click();\r\n    setMessageImg(\"advanced\");\r\n  };\r\n  const viewFile = (e) => {\r\n    const fileSend = document.querySelector(\".fileSend\");\r\n    fileSend.classList.add(\"hasFile\");\r\n    messImgElement.src = URL.createObjectURL(img.files[0]);\r\n  };\r\n\r\n  const submitMessageFile = (e) => {\r\n    e.preventDefault();\r\n    const msgObj = {\r\n      user_uid_1: auth.uid,\r\n      user_uid_2: userSelected.uid,\r\n      file: img.files[0],\r\n    };\r\n\r\n    dispatch(updateMessage({ msgObj: msgObj, type: \"file\" }));\r\n    const fileSend = document.querySelector(\".fileSend\");\r\n    fileSend.classList.remove(\"hasFile\");\r\n    messImgElement.src = \"\";\r\n    dispatch(\r\n      getRealTimeConversations({\r\n        uid_1: auth.uid,\r\n        uid_2: userSelected.uid,\r\n        type: \"afterSend\",\r\n      })\r\n    );\r\n  };\r\n  const submitMessage = (e) => {\r\n    e.preventDefault();\r\n    const msgObj = {\r\n      user_uid_1: auth.uid,\r\n      user_uid_2: userSelected.uid,\r\n      message,\r\n    };\r\n    if (message !== \"\") {\r\n      dispatch(updateMessage({ msgObj: msgObj }));\r\n      dispatch(\r\n        getRealTimeConversations({\r\n          uid_1: auth.uid,\r\n          uid_2: userSelected.uid,\r\n          type: \"afterSend\",\r\n        })\r\n      );\r\n\r\n      // let chatArea = document.getElementById(\"chatArea\");\r\n      // chatArea.scrollTop = chatArea.scrollHeight;\r\n\r\n      setMessage(\"\");\r\n    }\r\n  };\r\n  const handleScroll = () => {\r\n    let body = document.body;\r\n    let chatArea = document.querySelector(\".chatArea\");\r\n    chatArea = chatArea.clientHeight ? chatArea : body;\r\n\r\n    if (chatArea.scrollTop == 0) {\r\n      // const users = { uid_1: auth.uid, uid_2: userSelected.uid,lastestDoc };\r\n      // dispatch(getLoadMoreConversations(users))\r\n      // console.log(users)\r\n    }\r\n  };\r\n  const handleSeen = (e) => {\r\n    dispatch(setSeenMessage({ uid_1: auth.uid, uid_2: userSelected.uid }));\r\n  };\r\n  return (\r\n    <Layout>\r\n      <div className=\"homePage\">\r\n        {!loadingUser ? (\r\n          <div className=\"friendList\">\r\n            {users.map((item, index) => (\r\n              <div\r\n                key={index}\r\n                onClick={() => {\r\n                  initChat(item);\r\n                  selectItem(index);\r\n                }}\r\n                className=\"friend\"\r\n              >\r\n                <div className=\"avatar\">\r\n                  <img src={Mint} alt=\"avatar\" />\r\n                  <span\r\n                    className={item.isOnline ? \"isOnline\" : \"isOffline\"}\r\n                  ></span>\r\n                </div>\r\n                <div className=\"friendState\">\r\n                  <p className=\"friendName\">\r\n                    {item.firstName + \" \" + item.lastName}\r\n                  </p>\r\n                  <div className=\"friendLastText\">\r\n                    <p className=\"lastText\">See you again </p>\r\n                    <span></span>\r\n                    <p>4 hours ago</p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"friendButton\">\r\n                  <button>\r\n                    <div className=\"circle\"></div>\r\n                    <div className=\"circle\"></div>\r\n                    <div className=\"circle\"></div>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <div className=\"friendList loading\">\r\n            <BiLoaderCircle className=\"icon\" />\r\n          </div>\r\n        )}\r\n        {userSelected !== \"\" ? (\r\n          <div className=\"chatBox\">\r\n            <div className=\"headBox\">\r\n              <div className=\"headUser\">\r\n                <img alt=\"avatar\" src={Mint} />\r\n                <p>{userSelected.firstName}</p>\r\n              </div>\r\n              <div className=\"headCall\">\r\n                <AiOutlinePhone className=\"icon\" />\r\n                <BsCameraVideo className=\"icon\" />\r\n\r\n                <AiOutlineInfoCircle className=\"icon\" />\r\n              </div>\r\n            </div>\r\n            {!loadingChat ? (\r\n              <div onScroll={handleScroll} id=\"chatArea\" className=\"chatArea\">\r\n                <div className=\"chatAreaWrap\">\r\n                  {conversations.map((item, index) => (\r\n                    <div\r\n                      key={index}\r\n                      className={\r\n                        auth.uid == item.user_uid_1\r\n                          ? \"chatWrapper right\"\r\n                          : \"chatWrapper left\"\r\n                      }\r\n                    >\r\n                      {auth.uid !== item.user_uid_1 ? (\r\n                        <img className=\"avatar\" src={Mint} />\r\n                      ) : (\r\n                        <></>\r\n                      )}\r\n                      {item.type !== \"file\" ? (\r\n                        <div className='messageWrap'>\r\n                          <p key={index}>{item.message}</p>\r\n                        </div>\r\n\r\n                      ) : (\r\n                        <img\r\n                          className=\"messageFile\"\r\n                          src={item.file}\r\n                          key={index}\r\n                        />\r\n                      )}\r\n                      <AiOutlineCheckCircle\r\n                        className={\r\n                          auth.uid == item.user_uid_1 && !item.isView\r\n                            ? \"icon\"\r\n                            : \"icon gone\"\r\n                        }\r\n                      />\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"chatArea loading\">\r\n                <BiLoaderCircle className=\"icon\" />\r\n              </div>\r\n            )}\r\n            <div className=\"typeArea\">\r\n              <div className=\"action\">\r\n                <div className=\"fileSend\">\r\n                  <img id=\"messageImg\" />\r\n\r\n                  <div className=\"before\"></div>\r\n                  <AiOutlineSend onClick={submitMessageFile} className=\"icon\" />\r\n                </div>\r\n                <div className=\"actionWrap\">\r\n                  <input type=\"file\" className=\"fileInput\" />\r\n                  <AiOutlinePlusCircle className=\"icon\" />\r\n                </div>\r\n                <div className=\"actionWrap\">\r\n                  <input type=\"file\" id=\"fileInput\" className=\"fileInput\" />\r\n                  <AiOutlinePicture onClick={openFile} className=\"icon\" />\r\n                </div>\r\n                <div className=\"actionWrap\">\r\n                  <input type=\"file\" className=\"fileInput\" />\r\n                  <MdTagFaces className=\"icon\" />\r\n                </div>\r\n                <div className=\"actionWrap\">\r\n                  <input type=\"file\" className=\"fileInput\" />\r\n                  <AiOutlineFileGif className=\"icon\" />\r\n                </div>\r\n              </div>\r\n              <div className=\"input\">\r\n                <form onSubmit={submitMessage}>\r\n                  <input\r\n                    value={message}\r\n                    onClick={() => handleSeen()}\r\n                    onChange={(e) => setMessage(e.target.value)}\r\n                    type=\"text\"\r\n                    placeholder=\"Aa\"\r\n                  />\r\n                </form>\r\n                <MdTagFaces className=\"icon\" />\r\n              </div>\r\n              <div className=\"likeButton\">\r\n                {message === \"\" ? (\r\n                  <AiOutlineHeart className=\"icon\" />\r\n                ) : (\r\n                  <AiOutlineSend onClick={submitMessage} className=\"icon\" />\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"chatBox unSelected\">\r\n            <RiSendPlaneFill className=\"bigIcon\" />\r\n            <Title>Your Message</Title>\r\n            <p>Send private photos and messages to a friend or group.</p>\r\n            <Button>Send a message</Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\nexport default Home;\r\n",["131","132"],"C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\containers\\SignUpPage\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\components\\Header\\index.js",["133","134"],"import React from \"react\";\r\nimport \"./style.scss\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { isLoggedInUser, logout } from \"../../actions\";\r\nexport default function Header() {\r\n  const auth = useSelector(state=>state.auth)\r\n  const dispatch = useDispatch()\r\n\r\n  const handleLogout = ()=>{\r\n      dispatch(logout(auth.uid))\r\n  }\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"navBar\">\r\n        <div className=\"navSide\">\r\n          <ul className=\"navWrap\">\r\n            <li className=\"navItem\">\r\n              <NavLink to=\"/realtime-chat-application\" className=\"navLink\">\r\n                HOME\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"navItem\">\r\n              <NavLink to=\"/about\" className=\"navLink\">\r\n                ABOUT\r\n              </NavLink>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"logoArea\">\r\n          <img src=\"https://www.williamdollace.it/wp-content/themes/williamdollacetheme/images/logo.svg\" />\r\n        </div>\r\n        <div className=\"navSide\">\r\n          {!auth.authenticated ? <ul className=\"navWrap\">\r\n            <li className=\"navItem\">\r\n              <NavLink to=\"/login\" className=\"navLink\">\r\n                LOGIN\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"navItem\">\r\n              <NavLink to=\"/signup\" className=\"navLink\">\r\n                SIGN UP\r\n              </NavLink>\r\n            </li>\r\n          </ul>:\r\n          <ul className=\"navWrap\">\r\n          <li className=\"navItem\">\r\n          <NavLink to=\"/profile\" className=\"navLink\">\r\n               {auth.firstName} PROFILE\r\n              </NavLink>\r\n          </li>\r\n          <li className=\"navItem\">\r\n            <Link to=\"#\" onClick={handleLogout} className=\"navLink\">\r\n              LOG OUT\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Input\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Button\\index.js",[],["135","136"],"C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Title\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\index.js",["137"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from './store/index'\nwindow.store = store\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n",["138","139"],"C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Card\\index.js",[],["140","141"],"C:\\Website By Mint\\realtime-chat-application\\src\\store\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\actions\\auth.js",["142"],"import firebase from \"../database/firebase\";\r\nimport { authConstants } from \"./constants\";\r\nexport const signUp = (user) => {\r\n  return async (dispatch) => {\r\n    const db = firebase.firestore();\r\n    dispatch({\r\n      type: `${authConstants.USER_LOGIN}_REQUEST`,\r\n    });\r\n    firebase\r\n      .auth()\r\n      .createUserWithEmailAndPassword(user.email, user.password)\r\n      .then((data) => {\r\n        const currentUser = firebase.auth().currentUser;\r\n        const name = `${user.firstName} ${user.lastName}`;\r\n        currentUser\r\n          .updateProfile({\r\n            displayName: name,\r\n          })\r\n          .then(() => {\r\n            db.collection(\"users\")\r\n              .doc(data.user.uid)\r\n              .set({\r\n                firstName: user.firstName,\r\n                lastName: user.lastName,\r\n                createdAt: new Date(),\r\n                uid: data.user.uid,\r\n                isOnline: true,\r\n              })\r\n              .then(() => {\r\n                const loggedUser = {\r\n                  firstName: user.firstName,\r\n                  lastName: user.lastName,\r\n                  uid: data.user.uid,\r\n                  email: user.email,\r\n                };\r\n                localStorage.setItem(\r\n                  \"user\",\r\n                  JSON.stringify({\r\n                    loggedUser,\r\n                  })\r\n                );\r\n                dispatch({\r\n                  type: `${authConstants.USER_LOGIN}_SUCCESS`,\r\n                  payload: { user: loggedUser },\r\n                });\r\n              })\r\n              .catch((err) => {\r\n                dispatch({\r\n                  type: `${authConstants.USER_LOGIN}_FAILURE`,\r\n                  payload: err,\r\n                });\r\n              });\r\n          });\r\n      })\r\n      .catch((error) => {\r\n        dispatch({\r\n          type: `${authConstants.USER_LOGIN}_FAILURE`,\r\n          payload: { error: error.message },\r\n        });\r\n      });\r\n  };\r\n};\r\n\r\nexport const signIn = (user) => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type: `${authConstants.USER_LOGIN}_REQUEST`,\r\n    });\r\n    const db = firebase.firestore()\r\n    firebase\r\n      .auth()\r\n      .signInWithEmailAndPassword(user.email, user.password)\r\n      .then((data) => {\r\n        db.collection(\"users\")\r\n          .doc(data.user.uid)\r\n          .update({\r\n            isOnline : true\r\n          })\r\n          .then(() => {\r\n            var name = data.user.displayName;\r\n            name = name.split(\" \");\r\n            var stringArray = new Array();\r\n            for (var i = 0; i < name.length; i++) {\r\n              stringArray.push(name[i]);\r\n            }\r\n            const firstName = name[0];\r\n            const lastName = name[1];\r\n            const loggedUser = {\r\n              firstName,\r\n              lastName,\r\n              uid: data.user.uid,\r\n              email: data.user.email,\r\n            };\r\n            localStorage.setItem(\r\n              \"user\",\r\n              JSON.stringify({\r\n                user: loggedUser,\r\n              })\r\n            );\r\n            dispatch({\r\n              type: `${authConstants.USER_LOGIN}_SUCCESS`,\r\n              payload: { user: loggedUser },\r\n            });\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        dispatch({\r\n          type: `${authConstants.USER_LOGIN}_FAILURE`,\r\n          payload: { error: err.message },\r\n        });\r\n      })\r\n  };\r\n};\r\n\r\nexport const isLoggedInUser = () => {\r\n  return async (dispatch) => {\r\n    const user = localStorage.getItem(\"user\")\r\n      ? JSON.parse(localStorage.getItem(\"user\"))\r\n      : null;\r\n    if (user) {\r\n      dispatch({\r\n        type: `${authConstants.USER_LOGIN}_SUCCESS`,\r\n        payload: { user: user.user },\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: `${authConstants.USER_LOGIN}_FAILURE`,\r\n        payload: { error: \"\" },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const logout = (uid) => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: `${authConstants.USER_LOGOUT}_REQUEST` });\r\n    const db = firebase.firestore();\r\n    db.collection(\"users\")\r\n      .doc(uid)\r\n      .update({\r\n        isOnline: false,\r\n      })\r\n      .then(() => {\r\n        firebase\r\n          .auth()\r\n          .signOut()\r\n          .then(() => {\r\n            localStorage.clear();\r\n            dispatch({ type: `${authConstants.USER_LOGOUT}_SUCCESS` });\r\n          })\r\n          .catch((err) => {\r\n            dispatch({\r\n              type: `${authConstants.USER_LOGOUT}_FAILURE`,\r\n              payload: { error: err },\r\n            });\r\n          });\r\n      });\r\n  };\r\n};\r\n","C:\\Website By Mint\\realtime-chat-application\\src\\reducers\\index.js",[],["143","144"],"C:\\Website By Mint\\realtime-chat-application\\src\\database\\firebase.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\actions\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\reducers\\authReducer.js",["145"],"import { authConstants } from \"../actions/constants\"\r\n\r\nconst initialState = {\r\n    firstName : '',\r\n    lastName : '',\r\n    uid : '',\r\n    email : '',\r\n    authenticating : false,\r\n    authenticated : false,\r\n    error : null\r\n}\r\n\r\nexport default (state=initialState,action)=>{\r\n    switch(action.type)\r\n    {\r\n        case `${authConstants.USER_LOGIN}_REQUEST`:\r\n            state = {\r\n                ...state,\r\n                authenticating:true,\r\n            }\r\n            return state\r\n        case `${authConstants.USER_LOGIN}_SUCCESS`:\r\n            debugger\r\n            state = {\r\n                ...state,\r\n                firstName : action.payload.user.firstName,\r\n                lastName : action.payload.user.lastName,\r\n                uid : action.payload.user.uid,\r\n                email : action.payload.user.email,\r\n                authenticated:true,\r\n                authenticating:false,\r\n                error:null,\r\n            }\r\n            return state\r\n\r\n        case `${authConstants.USER_LOGIN}_FAILURE`:\r\n            state = {\r\n                ...state,\r\n                authenticated:false,\r\n                authenticating:false,\r\n                error:action.payload.error\r\n            }\r\n            return state\r\n\r\n        case `${authConstants.USER_LOGOUT}_REQUEST`:\r\n            return state\r\n\r\n        case `${authConstants.USER_LOGOUT}_SUCCESS`:\r\n            state={\r\n                ...initialState,\r\n\r\n            }\r\n            return state\r\n\r\n        case `${authConstants.USER_LOGOUT}_FAILURE`:\r\n            state={\r\n                ...state,\r\n                error:action.payload.error\r\n            }\r\n            return state\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","C:\\Website By Mint\\realtime-chat-application\\src\\components\\Private\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\actions\\constants.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\actions\\user.js",["146","147","148","149","150","151"],"import { userConstants } from \"./constants\";\r\nimport firebase from \"../database/firebase\";\r\nexport const getRealTimeUser = (uid) => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: `${userConstants.GET_REALTIME_USERS}_REQUEST` });\r\n    const db = firebase.firestore();\r\n\r\n    const unsubscribe = db\r\n      .collection(\"users\")\r\n      .where(\"uid\", \"!=\", uid)\r\n      .onSnapshot(function (snap) {\r\n        const users = [];\r\n        snap.forEach((doc) => {\r\n          if (doc.data().length != users.length) {\r\n            users.push(doc.data());\r\n          }\r\n        });\r\n        dispatch({\r\n          type: `${userConstants.GET_REALTIME_USERS}_SUCCESS`,\r\n          payload: { users },\r\n        });\r\n      });\r\n    return unsubscribe;\r\n  };\r\n};\r\nexport const updateMessage = ({ msgObj, type }) => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: `${userConstants.UPDATE_MESSAGE}_REQUEST` });\r\n    const db = firebase.firestore();\r\n    if (type != \"file\") {\r\n      db.collection(\"conversations\")\r\n        .add({\r\n          ...msgObj,\r\n          type: \"text\",\r\n          isView: false,\r\n          createdAt: new Date(),\r\n        })\r\n        .then((data) => {\r\n          dispatch({ type: `${userConstants.UPDATE_MESSAGE}_SUCCESS` });\r\n        })\r\n        .catch((error) => {\r\n          dispatch({\r\n            type: `${userConstants.UPDATE_MESSAGE}_REQUEST`,\r\n            payload: { error: error.message },\r\n          });\r\n        });\r\n    } else {\r\n      const ref = firebase.storage().ref();\r\n      const name = new Date() + \"-\" + msgObj.file.name;\r\n      const metaData = {\r\n        contentType: msgObj.file.type,\r\n      };\r\n      const task = ref.child(name).put(msgObj.file, metaData);\r\n      task.then((snapshot) => {\r\n        snapshot.ref.getDownloadURL().then((url) => {\r\n          db.collection(\"conversations\")\r\n            .add({\r\n              user_uid_1: msgObj.user_uid_1,\r\n              user_uid_2: msgObj.user_uid_2,\r\n              file: url,\r\n              type: \"file\",\r\n              isView: false,\r\n              createdAt: new Date(),\r\n            })\r\n            .then((data) => {\r\n              dispatch({ type: `${userConstants.UPDATE_MESSAGE}_SUCCESS` });\r\n            })\r\n            .catch((error) => {\r\n              dispatch({\r\n                type: `${userConstants.UPDATE_MESSAGE}_REQUEST`,\r\n                payload: { error: error.message },\r\n              });\r\n            });\r\n        });\r\n      });\r\n    }\r\n  };\r\n};\r\nexport const setSeenMessage = ({ uid_1, uid_2 }) => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: `${userConstants.SET_SEEN_MESSAGE}_REQUEST` });\r\n    const db = firebase.firestore();\r\n    db.collection(\"conversations\")\r\n      .where(\"user_uid_1\", \"==\", uid_2)\r\n      .where(\"user_uid_2\", \"==\", uid_1)\r\n      .orderBy(\"createdAt\", \"desc\")\r\n      .onSnapshot((querySnapshot) => {\r\n        querySnapshot.forEach((doc) => {\r\n          doc.ref.update({\r\n            isView: true,\r\n          });\r\n        });\r\n      });\r\n  };\r\n};\r\nexport const getLoadMoreConversations = ({ uid_1, uid_2, lastestDoc }) => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: `${userConstants.GET_LOADMORE_MESSAGE}_REQUEST` });\r\n    const db = firebase.firestore();\r\n\r\n    const ref = db\r\n      .collection(\"conversations\")\r\n      .orderBy(\"createdAt\", \"desc\")\r\n      .where(\"user_uid_1\", \"in\", [uid_2, uid_1])\r\n      .startAfter(lastestDoc || 0)\r\n      .limit(10);\r\n    const data = await ref.get();\r\n    lastestDoc = data.docs[data.docs.length - 1];\r\n    const conversations = [];\r\n    data.docs.forEach((doc) => {\r\n      conversations.push(doc.data());\r\n    });\r\n    if (conversations !== []) {\r\n      dispatch({\r\n        type: `${userConstants.GET_LOADMORE_MESSAGE}_SUCCESS`,\r\n        payload: { conversations: conversations.reverse(), lastestDoc },\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: `${userConstants.GET_LOADMORE_MESSAGE}_FAILURE`,\r\n        payload: { error: \"END\" },\r\n      });\r\n    }\r\n  };\r\n};\r\nexport const getRealTimeConversations = ({ uid_1, uid_2, type }) => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: `${userConstants.GET_REALTIME_MESSAGE}_REQUEST` });\r\n    const db = firebase.firestore();\r\n    const ref = db\r\n      .collection(\"conversations\")\r\n      .orderBy(\"createdAt\", \"desc\")\r\n      .where(\"user_uid_1\", \"in\", [uid_2, uid_1]);\r\n    const data = await ref.get();\r\n    const lastestDoc = data.docs[data.docs.length - 1];\r\n    db.collection(\"conversations\")\r\n      .orderBy(\"createdAt\", \"desc\")\r\n      .where(\"user_uid_1\", \"in\", [uid_1, uid_2])\r\n      .onSnapshot((querySnapshot) => {\r\n        const conversations = [];\r\n        querySnapshot.forEach((doc) => {\r\n          if (\r\n            (doc.data().user_uid_1 == uid_1 &&\r\n              doc.data().user_uid_2 == uid_2) ||\r\n            (doc.data().user_uid_1 == uid_2 && doc.data().user_uid_2 == uid_1)\r\n          ) {\r\n            conversations.push(doc.data());\r\n          }\r\n        });\r\n        dispatch({\r\n          type: `${userConstants.GET_REALTIME_MESSAGE}_SUCCESS`,\r\n          payload: { conversations: conversations.reverse(), lastestDoc },\r\n        });\r\n      });\r\n  };\r\n};\r\n","C:\\Website By Mint\\realtime-chat-application\\src\\reducers\\userReducer.js",["152"],"import { userConstants } from \"../actions/constants\";\r\n\r\nconst initialState = {\r\n  users: [],\r\n  conversations: [],\r\n  loadingUser: true,\r\n  loadingChat: true,\r\n  lastestDoc: {},\r\n};\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case `${userConstants.GET_REALTIME_USERS}_REQUEST`:\r\n      state = {\r\n        ...state,\r\n        loadingUser: true,\r\n      };\r\n      return state;\r\n    case `${userConstants.GET_REALTIME_USERS}_SUCCESS`:\r\n      state = {\r\n        ...state,\r\n        loadingUser: false,\r\n        users: action.payload.users,\r\n      };\r\n      return state;\r\n    case `${userConstants.GET_REALTIME_MESSAGE}_REQUEST`:\r\n      state = {\r\n        ...state,\r\n        loadingChat: true,\r\n      };\r\n      return state;\r\n    case `${userConstants.GET_REALTIME_MESSAGE}_SUCCESS`:\r\n      state = {\r\n        ...state,\r\n        loadingChat: false,\r\n        conversations: action.payload.conversations,\r\n        lastestDoc : action.payload.lastDoc,\r\n      };\r\n      return state;\r\n    case `${userConstants.GET_LOADMORE_MESSAGE}_REQUEST`:\r\n      state = {\r\n        ...state,\r\n        loadingChat: true,\r\n      };\r\n      return state;\r\n    case `${userConstants.GET_LOADMORE_MESSAGE}_SUCCESS`:\r\n      state = {\r\n        ...state,\r\n        loadingChat: false,\r\n        conversations: [\r\n          ...action.payload.conversations,\r\n          ...state.conversations,\r\n        ],\r\n        lastestDoc: action.payload.lastestDoc,\r\n      };\r\n      return state;\r\n    case `${userConstants.GET_LOADMORE_MESSAGE}_FAILURE`:\r\n      state = {\r\n        ...state,\r\n      };\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n",["153","154"],"C:\\Website By Mint\\realtime-chat-application\\src\\components\\Layout\\UI\\Error\\index.js",[],"C:\\Website By Mint\\realtime-chat-application\\src\\containers\\ProfilePage\\index.js",["155","156","157","158","159","160","161","162"],{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","severity":1,"message":"168","line":20,"column":5,"nodeType":"169","endLine":20,"endColumn":7,"suggestions":"170"},{"ruleId":"171","severity":1,"message":"172","line":15,"column":3,"nodeType":"173","messageId":"174","endLine":15,"endColumn":20},{"ruleId":"171","severity":1,"message":"175","line":23,"column":3,"nodeType":"173","messageId":"174","endLine":23,"endColumn":27},{"ruleId":"171","severity":1,"message":"176","line":42,"column":5,"nodeType":"173","messageId":"174","endLine":42,"endColumn":15},{"ruleId":"167","severity":1,"message":"177","line":51,"column":6,"nodeType":"169","endLine":51,"endColumn":8,"suggestions":"178"},{"ruleId":"179","severity":1,"message":"180","line":71,"column":22,"nodeType":"181","messageId":"182","endLine":71,"endColumn":24},{"ruleId":"167","severity":1,"message":"183","line":80,"column":6,"nodeType":"169","endLine":80,"endColumn":20,"suggestions":"184"},{"ruleId":"179","severity":1,"message":"180","line":82,"column":22,"nodeType":"181","messageId":"182","endLine":82,"endColumn":24},{"ruleId":"167","severity":1,"message":"185","line":86,"column":6,"nodeType":"169","endLine":86,"endColumn":21,"suggestions":"186"},{"ruleId":"179","severity":1,"message":"180","line":88,"column":20,"nodeType":"181","messageId":"182","endLine":88,"endColumn":22},{"ruleId":"167","severity":1,"message":"187","line":91,"column":6,"nodeType":"169","endLine":91,"endColumn":18,"suggestions":"188"},{"ruleId":"179","severity":1,"message":"189","line":153,"column":28,"nodeType":"181","messageId":"182","endLine":153,"endColumn":30},{"ruleId":"179","severity":1,"message":"189","line":228,"column":34,"nodeType":"181","messageId":"182","endLine":228,"endColumn":36},{"ruleId":"190","severity":1,"message":"191","line":234,"column":25,"nodeType":"192","endLine":234,"endColumn":62},{"ruleId":"190","severity":1,"message":"191","line":244,"column":25,"nodeType":"192","endLine":248,"endColumn":27},{"ruleId":"179","severity":1,"message":"189","line":252,"column":36,"nodeType":"181","messageId":"182","endLine":252,"endColumn":38},{"ruleId":"190","severity":1,"message":"191","line":269,"column":19,"nodeType":"192","endLine":269,"endColumn":42},{"ruleId":"163","replacedBy":"193"},{"ruleId":"165","replacedBy":"194"},{"ruleId":"171","severity":1,"message":"195","line":5,"column":10,"nodeType":"173","messageId":"174","endLine":5,"endColumn":24},{"ruleId":"190","severity":1,"message":"191","line":31,"column":11,"nodeType":"192","endLine":31,"endColumn":108},{"ruleId":"163","replacedBy":"196"},{"ruleId":"165","replacedBy":"197"},{"ruleId":"171","severity":1,"message":"198","line":5,"column":8,"nodeType":"173","messageId":"174","endLine":5,"endColumn":23},{"ruleId":"163","replacedBy":"199"},{"ruleId":"165","replacedBy":"200"},{"ruleId":"163","replacedBy":"201"},{"ruleId":"165","replacedBy":"202"},{"ruleId":"203","severity":1,"message":"204","line":82,"column":31,"nodeType":"205","messageId":"206","endLine":82,"endColumn":42},{"ruleId":"163","replacedBy":"207"},{"ruleId":"165","replacedBy":"208"},{"ruleId":"209","severity":1,"message":"210","line":13,"column":1,"nodeType":"211","endLine":65,"endColumn":2},{"ruleId":"179","severity":1,"message":"180","line":14,"column":33,"nodeType":"181","messageId":"182","endLine":14,"endColumn":35},{"ruleId":"179","severity":1,"message":"180","line":30,"column":14,"nodeType":"181","messageId":"182","endLine":30,"endColumn":16},{"ruleId":"179","severity":1,"message":"189","line":143,"column":36,"nodeType":"181","messageId":"182","endLine":143,"endColumn":38},{"ruleId":"179","severity":1,"message":"189","line":144,"column":37,"nodeType":"181","messageId":"182","endLine":144,"endColumn":39},{"ruleId":"179","severity":1,"message":"189","line":145,"column":36,"nodeType":"181","messageId":"182","endLine":145,"endColumn":38},{"ruleId":"179","severity":1,"message":"189","line":145,"column":70,"nodeType":"181","messageId":"182","endLine":145,"endColumn":72},{"ruleId":"209","severity":1,"message":"210","line":10,"column":1,"nodeType":"211","endLine":64,"endColumn":3},{"ruleId":"163","replacedBy":"212"},{"ruleId":"165","replacedBy":"213"},{"ruleId":"190","severity":1,"message":"191","line":14,"column":13,"nodeType":"192","endLine":14,"endColumn":31},{"ruleId":"190","severity":1,"message":"191","line":35,"column":19,"nodeType":"192","endLine":35,"endColumn":36},{"ruleId":"190","severity":1,"message":"191","line":44,"column":19,"nodeType":"192","endLine":44,"endColumn":36},{"ruleId":"190","severity":1,"message":"191","line":53,"column":19,"nodeType":"192","endLine":53,"endColumn":36},{"ruleId":"190","severity":1,"message":"191","line":62,"column":19,"nodeType":"192","endLine":62,"endColumn":36},{"ruleId":"190","severity":1,"message":"191","line":71,"column":19,"nodeType":"192","endLine":71,"endColumn":36},{"ruleId":"190","severity":1,"message":"191","line":80,"column":19,"nodeType":"192","endLine":80,"endColumn":36},{"ruleId":"190","severity":1,"message":"191","line":89,"column":19,"nodeType":"192","endLine":89,"endColumn":36},"no-native-reassign",["214"],"no-negated-in-lhs",["215"],"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'auth.authenticated' and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["216"],"no-unused-vars","'AiFillCheckCircle' is defined but never used.","Identifier","unusedVar","'getLoadMoreConversations' is defined but never used.","'lastestDoc' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'viewUser'. Either include it or remove the dependency array.",["217"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'auth.uid' and 'dispatch'. Either include them or remove the dependency array.",["218"],"React Hook useEffect has missing dependencies: 'loadingChat' and 'userSelected'. Either include them or remove the dependency array.",["219"],"React Hook useEffect has missing dependencies: 'img' and 'viewFile'. Either include them or remove the dependency array.",["220"],"Expected '===' and instead saw '=='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["214"],["215"],"'isLoggedInUser' is defined but never used.",["214"],["215"],"'reportWebVitals' is defined but never used.",["214"],["215"],["214"],["215"],"no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral",["214"],["215"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["214"],["215"],"no-global-assign","no-unsafe-negation",{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},"Update the dependencies array to be: [auth.authenticated, dispatch]",{"range":"231","text":"232"},"Update the dependencies array to be: [viewUser]",{"range":"233","text":"234"},"Update the dependencies array to be: [auth.uid, dispatch, userSelected]",{"range":"235","text":"236"},"Update the dependencies array to be: [conversations, loadingChat, userSelected]",{"range":"237","text":"238"},"Update the dependencies array to be: [img, messageImg, viewFile]",{"range":"239","text":"240"},[671,673],"[auth.authenticated, dispatch]",[1510,1512],"[viewUser]",[2416,2430],"[auth.uid, dispatch, userSelected]",[2624,2639],"[conversations, loadingChat, userSelected]",[2754,2766],"[img, messageImg, viewFile]"]